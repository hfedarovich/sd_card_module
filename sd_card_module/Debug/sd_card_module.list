
sd_card_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a0  080070a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070a8  080070a8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070a8  080070a8  000170a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080070b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000084  08007134  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08007134  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ab4  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028eb  00000000  00000000  00033b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  000373e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cba  00000000  00000000  00038250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154f5  00000000  00000000  0005ff0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec966  00000000  00000000  000753ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161d65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  00161db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dc0 	.word	0x08006dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08006dc0 	.word	0x08006dc0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <myprintf>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	693a      	ldr	r2, [r7, #16]
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	480b      	ldr	r0, [pc, #44]	; (8000608 <myprintf+0x44>)
 80005dc:	f005 ff94 	bl	8006508 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005e0:	4809      	ldr	r0, [pc, #36]	; (8000608 <myprintf+0x44>)
 80005e2:	f7ff fe15 	bl	8000210 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	4905      	ldr	r1, [pc, #20]	; (8000608 <myprintf+0x44>)
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <myprintf+0x48>)
 80005f6:	f002 fb50 	bl	8002c9a <HAL_UART_Transmit>

}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000604:	b004      	add	sp, #16
 8000606:	4770      	bx	lr
 8000608:	20000694 	.word	0x20000694
 800060c:	20000104 	.word	0x20000104

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fced 	bl	8000ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f910 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 fa12 	bl	8000a48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000624:	f000 f9b2 	bl	800098c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000628:	f000 f9e0 	bl	80009ec <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800062c:	f000 f970 	bl	8000910 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000630:	f003 faae 	bl	8003b90 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

      myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000634:	4872      	ldr	r0, [pc, #456]	; (8000800 <main+0x1f0>)
 8000636:	f7ff ffc5 	bl	80005c4 <myprintf>

      HAL_Delay(1000); //a short delay is important to let the SD card settle
 800063a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063e:	f000 fd37 	bl	80010b0 <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 8000642:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000646:	2201      	movs	r2, #1
 8000648:	496e      	ldr	r1, [pc, #440]	; (8000804 <main+0x1f4>)
 800064a:	4618      	mov	r0, r3
 800064c:	f005 f850 	bl	80056f0 <f_mount>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
      if (fres != FR_OK) {
 8000656:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <main+0x5c>
    	myprintf("f_mount error (%i)\r\n", fres);
 800065e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000662:	4619      	mov	r1, r3
 8000664:	4868      	ldr	r0, [pc, #416]	; (8000808 <main+0x1f8>)
 8000666:	f7ff ffad 	bl	80005c4 <myprintf>
    	while(1);
 800066a:	e7fe      	b.n	800066a <main+0x5a>
      //Let's get some statistics from the SD card
      DWORD free_clusters, free_sectors, total_sectors;

      FATFS* getFreeFs;

      fres = f_getfree("", &free_clusters, &getFreeFs);
 800066c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000674:	4619      	mov	r1, r3
 8000676:	4863      	ldr	r0, [pc, #396]	; (8000804 <main+0x1f4>)
 8000678:	f005 fd9a 	bl	80061b0 <f_getfree>
 800067c:	4603      	mov	r3, r0
 800067e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
      if (fres != FR_OK) {
 8000682:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <main+0x88>
    	myprintf("f_getfree error (%i)\r\n", fres);
 800068a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800068e:	4619      	mov	r1, r3
 8000690:	485e      	ldr	r0, [pc, #376]	; (800080c <main+0x1fc>)
 8000692:	f7ff ff97 	bl	80005c4 <myprintf>
    	while(1);
 8000696:	e7fe      	b.n	8000696 <main+0x86>
      }

      //Formula comes from ChaN's documentation
      total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000698:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800069c:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	3b02      	subs	r3, #2
 80006a6:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80006aa:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80006ae:	6812      	ldr	r2, [r2, #0]
 80006b0:	8952      	ldrh	r2, [r2, #10]
 80006b2:	fb02 f303 	mul.w	r3, r2, r3
 80006b6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
      free_sectors = free_clusters * getFreeFs->csize;
 80006ba:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006be:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	895b      	ldrh	r3, [r3, #10]
 80006c6:	461a      	mov	r2, r3
 80006c8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80006cc:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	fb02 f303 	mul.w	r3, r2, r3
 80006d6:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

      myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006da:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006de:	0859      	lsrs	r1, r3, #1
 80006e0:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80006e4:	085b      	lsrs	r3, r3, #1
 80006e6:	461a      	mov	r2, r3
 80006e8:	4849      	ldr	r0, [pc, #292]	; (8000810 <main+0x200>)
 80006ea:	f7ff ff6b 	bl	80005c4 <myprintf>

      //Now let's try to open file "test.txt"
      fres = f_open(&fil, "test.txt", FA_READ);
 80006ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f2:	2201      	movs	r2, #1
 80006f4:	4947      	ldr	r1, [pc, #284]	; (8000814 <main+0x204>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f840 	bl	800577c <f_open>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
      if (fres != FR_OK) {
 8000702:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000706:	2b00      	cmp	r3, #0
 8000708:	d003      	beq.n	8000712 <main+0x102>
    	myprintf("f_open error (%i)\r\n");
 800070a:	4843      	ldr	r0, [pc, #268]	; (8000818 <main+0x208>)
 800070c:	f7ff ff5a 	bl	80005c4 <myprintf>
    	while(1);
 8000710:	e7fe      	b.n	8000710 <main+0x100>
      }
      myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000712:	4842      	ldr	r0, [pc, #264]	; (800081c <main+0x20c>)
 8000714:	f7ff ff56 	bl	80005c4 <myprintf>
      //Read 30 bytes from "test.txt" on the SD card
      BYTE readBuf[30];

      //We can either use f_read OR f_gets to get data out of files
      //f_gets is a wrapper on f_read that does some string formatting for us
      TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000718:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	211e      	movs	r1, #30
 8000722:	4618      	mov	r0, r3
 8000724:	f005 fdf9 	bl	800631a <f_gets>
 8000728:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
      if(rres != 0) {
 800072c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8000730:	2b00      	cmp	r3, #0
 8000732:	d006      	beq.n	8000742 <main+0x132>
    	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	4619      	mov	r1, r3
 800073a:	4839      	ldr	r0, [pc, #228]	; (8000820 <main+0x210>)
 800073c:	f7ff ff42 	bl	80005c4 <myprintf>
 8000740:	e005      	b.n	800074e <main+0x13e>
      } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 8000742:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000746:	4619      	mov	r1, r3
 8000748:	4836      	ldr	r0, [pc, #216]	; (8000824 <main+0x214>)
 800074a:	f7ff ff3b 	bl	80005c4 <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 800074e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fd02 	bl	800615c <f_close>

      //Now let's try and write a file "write.txt"
      fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000758:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800075c:	221a      	movs	r2, #26
 800075e:	4932      	ldr	r1, [pc, #200]	; (8000828 <main+0x218>)
 8000760:	4618      	mov	r0, r3
 8000762:	f005 f80b 	bl	800577c <f_open>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
      if(fres == FR_OK) {
 800076c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000770:	2b00      	cmp	r3, #0
 8000772:	d103      	bne.n	800077c <main+0x16c>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000774:	482d      	ldr	r0, [pc, #180]	; (800082c <main+0x21c>)
 8000776:	f7ff ff25 	bl	80005c4 <myprintf>
 800077a:	e005      	b.n	8000788 <main+0x178>
      } else {
    	myprintf("f_open error (%i)\r\n", fres);
 800077c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000780:	4619      	mov	r1, r3
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <main+0x208>)
 8000784:	f7ff ff1e 	bl	80005c4 <myprintf>
      }

      //Copy in a string
      strncpy((char*)readBuf, "a new file is made!", 19);
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4a28      	ldr	r2, [pc, #160]	; (8000830 <main+0x220>)
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	8022      	strh	r2, [r4, #0]
 800079c:	3402      	adds	r4, #2
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	7023      	strb	r3, [r4, #0]
      UINT bytesWrote;
      fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	f107 0108 	add.w	r1, r7, #8
 80007a8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80007ac:	2213      	movs	r2, #19
 80007ae:	f005 fae2 	bl	8005d76 <f_write>
 80007b2:	4603      	mov	r3, r0
 80007b4:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
      if(fres == FR_OK) {
 80007b8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d109      	bne.n	80007d4 <main+0x1c4>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 80007c0:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80007c4:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4819      	ldr	r0, [pc, #100]	; (8000834 <main+0x224>)
 80007ce:	f7ff fef9 	bl	80005c4 <myprintf>
 80007d2:	e002      	b.n	80007da <main+0x1ca>
      } else {
    	myprintf("f_write error (%i)\r\n");
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <main+0x228>)
 80007d6:	f7ff fef5 	bl	80005c4 <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 80007da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fcbc 	bl	800615c <f_close>

      //We're done, so de-mount the drive
      f_mount(NULL, "", 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <main+0x1f4>)
 80007e8:	2000      	movs	r0, #0
 80007ea:	f004 ff81 	bl	80056f0 <f_mount>
      {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
          //Blink the LED every second
    	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007ee:	2180      	movs	r1, #128	; 0x80
 80007f0:	4812      	ldr	r0, [pc, #72]	; (800083c <main+0x22c>)
 80007f2:	f000 ff2c 	bl	800164e <HAL_GPIO_TogglePin>
    	  HAL_Delay(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fa:	f000 fc59 	bl	80010b0 <HAL_Delay>
    	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007fe:	e7f6      	b.n	80007ee <main+0x1de>
 8000800:	08006dd8 	.word	0x08006dd8
 8000804:	08006df8 	.word	0x08006df8
 8000808:	08006dfc 	.word	0x08006dfc
 800080c:	08006e14 	.word	0x08006e14
 8000810:	08006e2c 	.word	0x08006e2c
 8000814:	08006e74 	.word	0x08006e74
 8000818:	08006e80 	.word	0x08006e80
 800081c:	08006e94 	.word	0x08006e94
 8000820:	08006ec4 	.word	0x08006ec4
 8000824:	08006ef0 	.word	0x08006ef0
 8000828:	08006f04 	.word	0x08006f04
 800082c:	08006f10 	.word	0x08006f10
 8000830:	08006f40 	.word	0x08006f40
 8000834:	08006f54 	.word	0x08006f54
 8000838:	08006f78 	.word	0x08006f78
 800083c:	40020400 	.word	0x40020400

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	; 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f005 fe26 	bl	80064a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000864:	f001 f856 	bl	8001914 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <SystemClock_Config+0xc8>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <SystemClock_Config+0xc8>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <SystemClock_Config+0xc8>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <SystemClock_Config+0xcc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a20      	ldr	r2, [pc, #128]	; (800090c <SystemClock_Config+0xcc>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <SystemClock_Config+0xcc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008b4:	2348      	movs	r3, #72	; 0x48
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008bc:	2303      	movs	r3, #3
 80008be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 f835 	bl	8001934 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d0:	f000 f9ae 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2102      	movs	r1, #2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fac3 	bl	8001e7c <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008fc:	f000 f998 	bl	8000c30 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	; 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_SPI1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_SPI1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_SPI1_Init+0x74>)
 800091c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_SPI1_Init+0x74>)
 800092a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800092e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_SPI1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_SPI1_Init+0x74>)
 800093e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000942:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI1_Init+0x74>)
 8000946:	2238      	movs	r2, #56	; 0x38
 8000948:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SPI1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI1_Init+0x74>)
 800095e:	2207      	movs	r2, #7
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI1_Init+0x74>)
 800096a:	2208      	movs	r2, #8
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_SPI1_Init+0x74>)
 8000970:	f002 f89a 	bl	8002aa8 <HAL_SPI_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 f959 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000a0 	.word	0x200000a0
 8000988:	40013000 	.word	0x40013000

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_USART3_UART_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART3_UART_Init+0x58>)
 80009d0:	f002 f915 	bl	8002bfe <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f929 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000104 	.word	0x20000104
 80009e8:	40004800 	.word	0x40004800

080009ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2206      	movs	r2, #6
 80009fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	f000 fe27 	bl	8001682 <HAL_PCD_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f8f9 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000018c 	.word	0x2000018c

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b6f      	ldr	r3, [pc, #444]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a6e      	ldr	r2, [pc, #440]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b69      	ldr	r3, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a68      	ldr	r2, [pc, #416]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b66      	ldr	r3, [pc, #408]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a62      	ldr	r2, [pc, #392]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b5d      	ldr	r3, [pc, #372]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a5c      	ldr	r2, [pc, #368]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a56      	ldr	r2, [pc, #344]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a50      	ldr	r2, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <MX_GPIO_Init+0x1d4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af4:	484a      	ldr	r0, [pc, #296]	; (8000c20 <MX_GPIO_Init+0x1d8>)
 8000af6:	f000 fd91 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4849      	ldr	r0, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x1dc>)
 8000b00:	f000 fd8c 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4843      	ldr	r0, [pc, #268]	; (8000c28 <MX_GPIO_Init+0x1e0>)
 8000b1c:	f000 fbd2 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483b      	ldr	r0, [pc, #236]	; (8000c28 <MX_GPIO_Init+0x1e0>)
 8000b3c:	f000 fbc2 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000b40:	2306      	movs	r3, #6
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b50:	230b      	movs	r3, #11
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4834      	ldr	r0, [pc, #208]	; (8000c2c <MX_GPIO_Init+0x1e4>)
 8000b5c:	f000 fbb2 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4619      	mov	r1, r3
 8000b76:	482a      	ldr	r0, [pc, #168]	; (8000c20 <MX_GPIO_Init+0x1d8>)
 8000b78:	f000 fba4 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8e:	230b      	movs	r3, #11
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_GPIO_Init+0x1d8>)
 8000b9a:	f000 fb93 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b9e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <MX_GPIO_Init+0x1d8>)
 8000bb8:	f000 fb84 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bbc:	2340      	movs	r3, #64	; 0x40
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	; (8000c24 <MX_GPIO_Init+0x1dc>)
 8000bd4:	f000 fb76 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <MX_GPIO_Init+0x1dc>)
 8000bec:	f000 fb6a 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_GPIO_Init+0x1dc>)
 8000c0e:	f000 fb59 	bl	80012c4 <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	; 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40021800 	.word	0x40021800
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x44>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a17      	ldr	r2, [pc, #92]	; (8000d00 <HAL_SPI_MspInit+0x7c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d127      	bne.n	8000cf6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000cac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_SPI_MspInit+0x80>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cd6:	23e0      	movs	r3, #224	; 0xe0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_SPI_MspInit+0x84>)
 8000cf2:	f000 fae7 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40013000 	.word	0x40013000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0aa      	sub	sp, #168	; 0xa8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2284      	movs	r2, #132	; 0x84
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fbb7 	bl	80064a0 <memset>
  if(huart->Instance==USART3)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <HAL_UART_MspInit+0xb4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d13c      	bne.n	8000db6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fabc 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d56:	f7ff ff6b 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_UART_MspInit+0xb8>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0xb8>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0xb8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0xb8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <HAL_UART_MspInit+0xb8>)
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0xb8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da4:	2307      	movs	r3, #7
 8000da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_MspInit+0xbc>)
 8000db2:	f000 fa87 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	37a8      	adds	r7, #168	; 0xa8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b0ac      	sub	sp, #176	; 0xb0
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2284      	movs	r2, #132	; 0x84
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f005 fb57 	bl	80064a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dfa:	d159      	bne.n	8000eb0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fa5b 	bl	80022c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e18:	f7ff ff0a 	bl	8000c30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a25      	ldr	r2, [pc, #148]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b23      	ldr	r3, [pc, #140]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e34:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4818      	ldr	r0, [pc, #96]	; (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e5c:	f000 fa32 	bl	80012c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <HAL_PCD_MspInit+0xf0>)
 8000e7c:	f000 fa22 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8a:	6353      	str	r3, [r2, #52]	; 0x34
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000e9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_PCD_MspInit+0xec>)
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37b0      	adds	r7, #176	; 0xb0
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 f8b0 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f005 fa82 	bl	800644c <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20050000 	.word	0x20050000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	20000794 	.word	0x20000794
 8000f7c:	200007e8 	.word	0x200007e8

08000f80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fce:	f7ff ffd7 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f005 fa41 	bl	8006458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fb1b 	bl	8000610 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000fe8:	080070b0 	.word	0x080070b0
  ldr r2, =_sbss
 8000fec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ff0:	200007e8 	.word	0x200007e8

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>

08000ff6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f92e 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f805 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001006:	f7ff fe19 	bl	8000c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f93b 	bl	80012aa <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f911 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	20000798 	.word	0x20000798

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000798 	.word	0x20000798

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	05fa0000 	.word	0x05fa0000

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff47 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5c 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb0 	bl	8001218 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e175      	b.n	80015d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8164 	bne.w	80015ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_GPIO_Init+0x56>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b03      	cmp	r3, #3
 8001386:	d017      	beq.n	80013b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80be 	beq.w	80015ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b63      	ldr	r3, [pc, #396]	; (80015e8 <HAL_GPIO_Init+0x324>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001466:	4a61      	ldr	r2, [pc, #388]	; (80015ec <HAL_GPIO_Init+0x328>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_GPIO_Init+0x32c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d037      	beq.n	8001502 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_GPIO_Init+0x330>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a56      	ldr	r2, [pc, #344]	; (80015f8 <HAL_GPIO_Init+0x334>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a55      	ldr	r2, [pc, #340]	; (80015fc <HAL_GPIO_Init+0x338>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a54      	ldr	r2, [pc, #336]	; (8001600 <HAL_GPIO_Init+0x33c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a53      	ldr	r2, [pc, #332]	; (8001604 <HAL_GPIO_Init+0x340>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x22a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x344>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x348>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x34c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x350>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x21a>
 80014da:	2309      	movs	r3, #9
 80014dc:	e012      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014de:	230a      	movs	r3, #10
 80014e0:	e010      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e2:	2308      	movs	r3, #8
 80014e4:	e00e      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x240>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001514:	4935      	ldr	r1, [pc, #212]	; (80015ec <HAL_GPIO_Init+0x328>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a34      	ldr	r2, [pc, #208]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_GPIO_Init+0x354>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_GPIO_Init+0x354>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_GPIO_Init+0x354>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_GPIO_Init+0x354>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_GPIO_Init+0x354>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae86 	bls.w	80012e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40021c00 	.word	0x40021c00
 8001610:	40022000 	.word	0x40022000
 8001614:	40022400 	.word	0x40022400
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001660:	887a      	ldrh	r2, [r7, #2]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	041a      	lsls	r2, r3, #16
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	43d9      	mvns	r1, r3
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	400b      	ands	r3, r1
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001684:	b08f      	sub	sp, #60	; 0x3c
 8001686:	af0a      	add	r7, sp, #40	; 0x28
 8001688:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e116      	b.n	80018c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fb8c 	bl	8000dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2203      	movs	r2, #3
 80016b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d102      	bne.n	80016ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 ffc0 	bl	8003658 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	687e      	ldr	r6, [r7, #4]
 80016e0:	466d      	mov	r5, sp
 80016e2:	f106 0410 	add.w	r4, r6, #16
 80016e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016f6:	1d33      	adds	r3, r6, #4
 80016f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	f001 ff54 	bl	80035a8 <USB_CoreInit>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2202      	movs	r2, #2
 800170a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0d7      	b.n	80018c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f001 ffae 	bl	800367a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e04a      	b.n	80017ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	333d      	adds	r3, #61	; 0x3d
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	333c      	adds	r3, #60	; 0x3c
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	b298      	uxth	r0, r3
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3344      	adds	r3, #68	; 0x44
 8001760:	4602      	mov	r2, r0
 8001762:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	3340      	adds	r3, #64	; 0x40
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	3348      	adds	r3, #72	; 0x48
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	334c      	adds	r3, #76	; 0x4c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3354      	adds	r3, #84	; 0x54
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	3301      	adds	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3af      	bcc.n	8001724 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e044      	b.n	8001854 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	3301      	adds	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3b5      	bcc.n	80017ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	687e      	ldr	r6, [r7, #4]
 8001866:	466d      	mov	r5, sp
 8001868:	f106 0410 	add.w	r4, r6, #16
 800186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001878:	e885 0003 	stmia.w	r5, {r0, r1}
 800187c:	1d33      	adds	r3, r6, #4
 800187e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f001 ff47 	bl	8003714 <USB_DevInit>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e014      	b.n	80018c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d102      	bne.n	80018b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f80b 	bl	80018cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 f905 	bl	8003aca <USB_DevDisconnect>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080018cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_PCDEx_ActivateLPM+0x44>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	10000003 	.word	0x10000003

08001914 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40007000 	.word	0x40007000

08001934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e291      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8087 	beq.w	8001a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001958:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b04      	cmp	r3, #4
 8001962:	d00c      	beq.n	800197e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001964:	4b93      	ldr	r3, [pc, #588]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d112      	bne.n	8001996 <HAL_RCC_OscConfig+0x62>
 8001970:	4b90      	ldr	r3, [pc, #576]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800197c:	d10b      	bne.n	8001996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197e:	4b8d      	ldr	r3, [pc, #564]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d06c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x130>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d168      	bne.n	8001a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e26b      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x7a>
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a83      	ldr	r2, [pc, #524]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	e02e      	b.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x9c>
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a7e      	ldr	r2, [pc, #504]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7b      	ldr	r2, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e01d      	b.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 80019da:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0xd8>
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 80019fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6b      	ldr	r2, [pc, #428]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb40 	bl	8001098 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fb3c 	bl	8001098 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e21f      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb2c 	bl	8001098 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fb28 	bl	8001098 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e20b      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x110>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d069      	beq.n	8001b46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a72:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d11c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x190>
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d116      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x17a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1df      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	493d      	ldr	r1, [pc, #244]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	e040      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d023      	beq.n	8001b14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fade 	bl	8001098 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fada 	bl	8001098 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1bd      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4929      	ldr	r1, [pc, #164]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
 8001b12:	e018      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff faba 	bl	8001098 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fab6 	bl	8001098 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e199      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d038      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff fa97 	bl	8001098 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fa93 	bl	8001098 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e176      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x23a>
 8001b8c:	e01a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_RCC_OscConfig+0x280>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fa7d 	bl	8001098 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fa79 	bl	8001098 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d903      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e15c      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
 8001bb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a4 	beq.w	8001d1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b8b      	ldr	r3, [pc, #556]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10d      	bne.n	8001bfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a87      	ldr	r2, [pc, #540]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfa:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c06:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x4d0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7e      	ldr	r2, [pc, #504]	; (8001e04 <HAL_RCC_OscConfig+0x4d0>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c12:	f7ff fa41 	bl	8001098 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1a:	f7ff fa3d 	bl	8001098 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b64      	cmp	r3, #100	; 0x64
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e120      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2c:	4b75      	ldr	r3, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x4d0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x31a>
 8001c40:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c44:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4c:	e02d      	b.n	8001caa <HAL_RCC_OscConfig+0x376>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x33c>
 8001c56:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a69      	ldr	r2, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c68:	f023 0304 	bic.w	r3, r3, #4
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	e01c      	b.n	8001caa <HAL_RCC_OscConfig+0x376>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCC_OscConfig+0x35e>
 8001c78:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a60      	ldr	r2, [pc, #384]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x376>
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a5a      	ldr	r2, [pc, #360]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f9f1 	bl	8001098 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f9ed 	bl	8001098 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0ce      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd0:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ee      	beq.n	8001cba <HAL_RCC_OscConfig+0x386>
 8001cdc:	e014      	b.n	8001d08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f9db 	bl	8001098 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7ff f9d7 	bl	8001098 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0b8      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ee      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d105      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d0e:	4b3c      	ldr	r3, [pc, #240]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a3b      	ldr	r2, [pc, #236]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a4 	beq.w	8001e6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d24:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d06b      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d149      	bne.n	8001dcc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a30      	ldr	r2, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7ff f9a8 	bl	8001098 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f9a4 	bl	8001098 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e087      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69da      	ldr	r2, [r3, #28]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	041b      	lsls	r3, r3, #16
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f978 	bl	8001098 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f974 	bl	8001098 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e057      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x478>
 8001dca:	e04f      	b.n	8001e6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f95e 	bl	8001098 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f95a 	bl	8001098 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e03d      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4ac>
 8001dfe:	e035      	b.n	8001e6c <HAL_RCC_OscConfig+0x538>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x544>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d028      	beq.n	8001e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d121      	bne.n	8001e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d11a      	bne.n	8001e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d111      	bne.n	8001e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0d0      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b6a      	ldr	r3, [pc, #424]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d910      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b67      	ldr	r3, [pc, #412]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 020f 	bic.w	r2, r3, #15
 8001eaa:	4965      	ldr	r1, [pc, #404]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b63      	ldr	r3, [pc, #396]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0b8      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001edc:	4b59      	ldr	r3, [pc, #356]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ee6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a52      	ldr	r2, [pc, #328]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001efe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	494d      	ldr	r1, [pc, #308]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d040      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d115      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e07f      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e073      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06b      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4936      	ldr	r1, [pc, #216]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f70:	f7ff f892 	bl	8001098 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7ff f88e 	bl	8001098 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e053      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d210      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 020f 	bic.w	r2, r3, #15
 8001fb6:	4922      	ldr	r1, [pc, #136]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e032      	b.n	8002036 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4916      	ldr	r1, [pc, #88]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	490e      	ldr	r1, [pc, #56]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800200e:	f000 f821 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	490a      	ldr	r1, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x1cc>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1d4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe ffee 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00
 8002044:	40023800 	.word	0x40023800
 8002048:	08006fd4 	.word	0x08006fd4
 800204c:	20000000 	.word	0x20000000
 8002050:	20000004 	.word	0x20000004

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002058:	b094      	sub	sp, #80	; 0x50
 800205a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	647b      	str	r3, [r7, #68]	; 0x44
 8002060:	2300      	movs	r3, #0
 8002062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002064:	2300      	movs	r3, #0
 8002066:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800206c:	4b79      	ldr	r3, [pc, #484]	; (8002254 <HAL_RCC_GetSysClockFreq+0x200>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d00d      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x40>
 8002078:	2b08      	cmp	r3, #8
 800207a:	f200 80e1 	bhi.w	8002240 <HAL_RCC_GetSysClockFreq+0x1ec>
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x34>
 8002082:	2b04      	cmp	r3, #4
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x3a>
 8002086:	e0db      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002088:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_GetSysClockFreq+0x204>)
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208c:	e0db      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208e:	4b73      	ldr	r3, [pc, #460]	; (800225c <HAL_RCC_GetSysClockFreq+0x208>)
 8002090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002092:	e0d8      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002094:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_GetSysClockFreq+0x200>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800209c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800209e:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020aa:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	099b      	lsrs	r3, r3, #6
 80020b0:	2200      	movs	r2, #0
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
 80020be:	2300      	movs	r3, #0
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
 80020c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020c6:	4622      	mov	r2, r4
 80020c8:	462b      	mov	r3, r5
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	0159      	lsls	r1, r3, #5
 80020d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d8:	0150      	lsls	r0, r2, #5
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4621      	mov	r1, r4
 80020e0:	1a51      	subs	r1, r2, r1
 80020e2:	6139      	str	r1, [r7, #16]
 80020e4:	4629      	mov	r1, r5
 80020e6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f8:	4659      	mov	r1, fp
 80020fa:	018b      	lsls	r3, r1, #6
 80020fc:	4651      	mov	r1, sl
 80020fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002102:	4651      	mov	r1, sl
 8002104:	018a      	lsls	r2, r1, #6
 8002106:	4651      	mov	r1, sl
 8002108:	ebb2 0801 	subs.w	r8, r2, r1
 800210c:	4659      	mov	r1, fp
 800210e:	eb63 0901 	sbc.w	r9, r3, r1
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002126:	4690      	mov	r8, r2
 8002128:	4699      	mov	r9, r3
 800212a:	4623      	mov	r3, r4
 800212c:	eb18 0303 	adds.w	r3, r8, r3
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	462b      	mov	r3, r5
 8002134:	eb49 0303 	adc.w	r3, r9, r3
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002146:	4629      	mov	r1, r5
 8002148:	024b      	lsls	r3, r1, #9
 800214a:	4621      	mov	r1, r4
 800214c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002150:	4621      	mov	r1, r4
 8002152:	024a      	lsls	r2, r1, #9
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215a:	2200      	movs	r2, #0
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
 800215e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002160:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002164:	f7fe f8ac 	bl	80002c0 <__aeabi_uldivmod>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4613      	mov	r3, r2
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002170:	e058      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_RCC_GetSysClockFreq+0x200>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	2200      	movs	r2, #0
 800217a:	4618      	mov	r0, r3
 800217c:	4611      	mov	r1, r2
 800217e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002182:	623b      	str	r3, [r7, #32]
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
 8002188:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800218c:	4642      	mov	r2, r8
 800218e:	464b      	mov	r3, r9
 8002190:	f04f 0000 	mov.w	r0, #0
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	0159      	lsls	r1, r3, #5
 800219a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219e:	0150      	lsls	r0, r2, #5
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4641      	mov	r1, r8
 80021a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021aa:	4649      	mov	r1, r9
 80021ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021c4:	ebb2 040a 	subs.w	r4, r2, sl
 80021c8:	eb63 050b 	sbc.w	r5, r3, fp
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	00eb      	lsls	r3, r5, #3
 80021d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021da:	00e2      	lsls	r2, r4, #3
 80021dc:	4614      	mov	r4, r2
 80021de:	461d      	mov	r5, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	18e3      	adds	r3, r4, r3
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	464b      	mov	r3, r9
 80021e8:	eb45 0303 	adc.w	r3, r5, r3
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021fa:	4629      	mov	r1, r5
 80021fc:	028b      	lsls	r3, r1, #10
 80021fe:	4621      	mov	r1, r4
 8002200:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002204:	4621      	mov	r1, r4
 8002206:	028a      	lsls	r2, r1, #10
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220e:	2200      	movs	r2, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	61fa      	str	r2, [r7, #28]
 8002214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002218:	f7fe f852 	bl	80002c0 <__aeabi_uldivmod>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4613      	mov	r3, r2
 8002222:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <HAL_RCC_GetSysClockFreq+0x200>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	3301      	adds	r3, #1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetSysClockFreq+0x204>)
 8002242:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002248:	4618      	mov	r0, r3
 800224a:	3750      	adds	r7, #80	; 0x50
 800224c:	46bd      	mov	sp, r7
 800224e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	00f42400 	.word	0x00f42400
 800225c:	007a1200 	.word	0x007a1200

08002260 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800227c:	f7ff fff0 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0a9b      	lsrs	r3, r3, #10
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40023800 	.word	0x40023800
 800229c:	08006fe4 	.word	0x08006fe4

080022a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a4:	f7ff ffdc 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	0b5b      	lsrs	r3, r3, #13
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	4903      	ldr	r1, [pc, #12]	; (80022c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40023800 	.word	0x40023800
 80022c4:	08006fe4 	.word	0x08006fe4

080022c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d012      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022f0:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a68      	ldr	r2, [pc, #416]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	4964      	ldr	r1, [pc, #400]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d017      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	4959      	ldr	r1, [pc, #356]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d017      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800235e:	4b4e      	ldr	r3, [pc, #312]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	494a      	ldr	r1, [pc, #296]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237c:	d101      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800237e:	2301      	movs	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800239a:	2301      	movs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 808b 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6413      	str	r3, [r2, #64]	; 0x40
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a34      	ldr	r2, [pc, #208]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023d0:	f7fe fe62 	bl	8001098 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fe5e 	bl	8001098 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e357      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023f6:	4b28      	ldr	r3, [pc, #160]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d035      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	429a      	cmp	r2, r3
 8002412:	d02e      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002414:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a1a      	ldr	r2, [pc, #104]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d114      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fe26 	bl	8001098 <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002450:	f7fe fe22 	bl	8001098 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e319      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0ee      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800247e:	d111      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800248e:	400b      	ands	r3, r1
 8002490:	4901      	ldr	r1, [pc, #4]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
 8002496:	e00b      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	0ffffcff 	.word	0x0ffffcff
 80024a4:	4baa      	ldr	r3, [pc, #680]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4aa9      	ldr	r2, [pc, #676]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80024ae:	6093      	str	r3, [r2, #8]
 80024b0:	4ba7      	ldr	r3, [pc, #668]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	49a4      	ldr	r1, [pc, #656]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d010      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ce:	4ba0      	ldr	r3, [pc, #640]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d4:	4a9e      	ldr	r2, [pc, #632]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024de:	4b9c      	ldr	r3, [pc, #624]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	4999      	ldr	r1, [pc, #612]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fc:	4b94      	ldr	r3, [pc, #592]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250a:	4991      	ldr	r1, [pc, #580]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251e:	4b8c      	ldr	r3, [pc, #560]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800252c:	4988      	ldr	r1, [pc, #544]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002540:	4b83      	ldr	r3, [pc, #524]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254e:	4980      	ldr	r1, [pc, #512]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002562:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	4977      	ldr	r1, [pc, #476]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002584:	4b72      	ldr	r3, [pc, #456]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	496f      	ldr	r1, [pc, #444]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025a6:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f023 020c 	bic.w	r2, r3, #12
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	4966      	ldr	r1, [pc, #408]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	495e      	ldr	r1, [pc, #376]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025ea:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f8:	4955      	ldr	r1, [pc, #340]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	494d      	ldr	r1, [pc, #308]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800262e:	4b48      	ldr	r3, [pc, #288]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4944      	ldr	r1, [pc, #272]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002650:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	493c      	ldr	r1, [pc, #240]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002672:	4b37      	ldr	r3, [pc, #220]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002680:	4933      	ldr	r1, [pc, #204]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002694:	4b2e      	ldr	r3, [pc, #184]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a2:	492b      	ldr	r1, [pc, #172]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d011      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c4:	4922      	ldr	r1, [pc, #136]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d4:	d101      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	4912      	ldr	r1, [pc, #72]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002718:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002728:	4909      	ldr	r1, [pc, #36]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d006      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 80d9 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002744:	4b02      	ldr	r3, [pc, #8]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a01      	ldr	r2, [pc, #4]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800274a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800274e:	e001      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002750:	40023800 	.word	0x40023800
 8002754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002756:	f7fe fc9f 	bl	8001098 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800275e:	f7fe fc9b 	bl	8001098 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d901      	bls.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e194      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002770:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11d      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002790:	4b64      	ldr	r3, [pc, #400]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a4:	0e1b      	lsrs	r3, r3, #24
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	019a      	lsls	r2, r3, #6
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	071b      	lsls	r3, r3, #28
 80027c4:	4957      	ldr	r1, [pc, #348]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d004      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f6:	d129      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027f8:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	0f1b      	lsrs	r3, r3, #28
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	019a      	lsls	r2, r3, #6
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	041b      	lsls	r3, r3, #16
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	431a      	orrs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	071b      	lsls	r3, r3, #28
 800282c:	493d      	ldr	r1, [pc, #244]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800283a:	f023 021f 	bic.w	r2, r3, #31
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	3b01      	subs	r3, #1
 8002844:	4937      	ldr	r1, [pc, #220]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01d      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	0e1b      	lsrs	r3, r3, #24
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002866:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800286c:	0f1b      	lsrs	r3, r3, #28
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	019a      	lsls	r2, r3, #6
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	061b      	lsls	r3, r3, #24
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	4925      	ldr	r1, [pc, #148]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d011      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	019a      	lsls	r2, r3, #6
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	061b      	lsls	r3, r3, #24
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	071b      	lsls	r3, r3, #28
 80028bc:	4919      	ldr	r1, [pc, #100]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d0:	f7fe fbe2 	bl	8001098 <HAL_GetTick>
 80028d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028d8:	f7fe fbde 	bl	8001098 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0d7      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 80cd 	bne.w	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290a:	f7fe fbc5 	bl	8001098 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002912:	f7fe fbc1 	bl	8001098 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	; 0x64
 800291e:	d903      	bls.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0ba      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002924:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002928:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002934:	d0ed      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02e      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d12a      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800295e:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800296c:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	0f1b      	lsrs	r3, r3, #28
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	019a      	lsls	r2, r3, #6
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	431a      	orrs	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	071b      	lsls	r3, r3, #28
 8002992:	4944      	ldr	r1, [pc, #272]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	493d      	ldr	r1, [pc, #244]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d022      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c8:	d11d      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	0e1b      	lsrs	r3, r3, #24
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029d8:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	0f1b      	lsrs	r3, r3, #28
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	019a      	lsls	r2, r3, #6
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	431a      	orrs	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	071b      	lsls	r3, r3, #28
 80029fe:	4929      	ldr	r1, [pc, #164]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d028      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	019a      	lsls	r2, r3, #6
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	071b      	lsls	r3, r3, #28
 8002a46:	4917      	ldr	r1, [pc, #92]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	4911      	ldr	r1, [pc, #68]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a70:	f7fe fb12 	bl	8001098 <HAL_GetTick>
 8002a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a78:	f7fe fb0e 	bl	8001098 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e007      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a96:	d1ef      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e09d      	b.n	8002bf6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aca:	d009      	beq.n	8002ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
 8002ad2:	e005      	b.n	8002ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fe f8c2 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b20:	d902      	bls.n	8002b28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b36:	d007      	beq.n	8002b48 <HAL_SPI_Init+0xa0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	ea42 0103 	orr.w	r1, r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	f003 0204 	and.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002bc4:	ea42 0103 	orr.w	r1, r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e040      	b.n	8002c92 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe f873 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2224      	movs	r2, #36	; 0x24
 8002c2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f8af 	bl	8002da0 <UART_SetConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e022      	b.n	8002c92 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fb07 	bl	8003268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fb8e 	bl	80033ac <UART_CheckIdleState>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b08a      	sub	sp, #40	; 0x28
 8002c9e:	af02      	add	r7, sp, #8
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d171      	bne.n	8002d96 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <HAL_UART_Transmit+0x24>
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06a      	b.n	8002d98 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe f9e2 	bl	8001098 <HAL_GetTick>
 8002cd4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cee:	d108      	bne.n	8002d02 <HAL_UART_Transmit+0x68>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e003      	b.n	8002d0a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d0a:	e02c      	b.n	8002d66 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2180      	movs	r1, #128	; 0x80
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fb7f 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e038      	b.n	8002d98 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	3302      	adds	r3, #2
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e007      	b.n	8002d54 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1cc      	bne.n	8002d0c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fb4c 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e005      	b.n	8002d98 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4ba6      	ldr	r3, [pc, #664]	; (8003064 <UART_SetConfig+0x2c4>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a94      	ldr	r2, [pc, #592]	; (8003068 <UART_SetConfig+0x2c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d120      	bne.n	8002e5e <UART_SetConfig+0xbe>
 8002e1c:	4b93      	ldr	r3, [pc, #588]	; (800306c <UART_SetConfig+0x2cc>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d816      	bhi.n	8002e58 <UART_SetConfig+0xb8>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x90>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e4d 	.word	0x08002e4d
 8002e38:	08002e47 	.word	0x08002e47
 8002e3c:	08002e53 	.word	0x08002e53
 8002e40:	2301      	movs	r3, #1
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e150      	b.n	80030e8 <UART_SetConfig+0x348>
 8002e46:	2302      	movs	r3, #2
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e14d      	b.n	80030e8 <UART_SetConfig+0x348>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e14a      	b.n	80030e8 <UART_SetConfig+0x348>
 8002e52:	2308      	movs	r3, #8
 8002e54:	77fb      	strb	r3, [r7, #31]
 8002e56:	e147      	b.n	80030e8 <UART_SetConfig+0x348>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e144      	b.n	80030e8 <UART_SetConfig+0x348>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a83      	ldr	r2, [pc, #524]	; (8003070 <UART_SetConfig+0x2d0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d132      	bne.n	8002ece <UART_SetConfig+0x12e>
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <UART_SetConfig+0x2cc>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d828      	bhi.n	8002ec8 <UART_SetConfig+0x128>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0xdc>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002eb1 	.word	0x08002eb1
 8002e80:	08002ec9 	.word	0x08002ec9
 8002e84:	08002ec9 	.word	0x08002ec9
 8002e88:	08002ec9 	.word	0x08002ec9
 8002e8c:	08002ebd 	.word	0x08002ebd
 8002e90:	08002ec9 	.word	0x08002ec9
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ec9 	.word	0x08002ec9
 8002e9c:	08002eb7 	.word	0x08002eb7
 8002ea0:	08002ec9 	.word	0x08002ec9
 8002ea4:	08002ec9 	.word	0x08002ec9
 8002ea8:	08002ec9 	.word	0x08002ec9
 8002eac:	08002ec3 	.word	0x08002ec3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e118      	b.n	80030e8 <UART_SetConfig+0x348>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e115      	b.n	80030e8 <UART_SetConfig+0x348>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e112      	b.n	80030e8 <UART_SetConfig+0x348>
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e10f      	b.n	80030e8 <UART_SetConfig+0x348>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e10c      	b.n	80030e8 <UART_SetConfig+0x348>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a68      	ldr	r2, [pc, #416]	; (8003074 <UART_SetConfig+0x2d4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d120      	bne.n	8002f1a <UART_SetConfig+0x17a>
 8002ed8:	4b64      	ldr	r3, [pc, #400]	; (800306c <UART_SetConfig+0x2cc>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ee2:	2b30      	cmp	r3, #48	; 0x30
 8002ee4:	d013      	beq.n	8002f0e <UART_SetConfig+0x16e>
 8002ee6:	2b30      	cmp	r3, #48	; 0x30
 8002ee8:	d814      	bhi.n	8002f14 <UART_SetConfig+0x174>
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d009      	beq.n	8002f02 <UART_SetConfig+0x162>
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d810      	bhi.n	8002f14 <UART_SetConfig+0x174>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <UART_SetConfig+0x15c>
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d006      	beq.n	8002f08 <UART_SetConfig+0x168>
 8002efa:	e00b      	b.n	8002f14 <UART_SetConfig+0x174>
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e0f2      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f02:	2302      	movs	r3, #2
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e0ef      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e0ec      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e0e9      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f14:	2310      	movs	r3, #16
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	e0e6      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a56      	ldr	r2, [pc, #344]	; (8003078 <UART_SetConfig+0x2d8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d120      	bne.n	8002f66 <UART_SetConfig+0x1c6>
 8002f24:	4b51      	ldr	r3, [pc, #324]	; (800306c <UART_SetConfig+0x2cc>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002f30:	d013      	beq.n	8002f5a <UART_SetConfig+0x1ba>
 8002f32:	2bc0      	cmp	r3, #192	; 0xc0
 8002f34:	d814      	bhi.n	8002f60 <UART_SetConfig+0x1c0>
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d009      	beq.n	8002f4e <UART_SetConfig+0x1ae>
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d810      	bhi.n	8002f60 <UART_SetConfig+0x1c0>
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <UART_SetConfig+0x1a8>
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d006      	beq.n	8002f54 <UART_SetConfig+0x1b4>
 8002f46:	e00b      	b.n	8002f60 <UART_SetConfig+0x1c0>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e0cc      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e0c9      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f54:	2304      	movs	r3, #4
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e0c6      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e0c3      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f60:	2310      	movs	r3, #16
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e0c0      	b.n	80030e8 <UART_SetConfig+0x348>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a44      	ldr	r2, [pc, #272]	; (800307c <UART_SetConfig+0x2dc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d125      	bne.n	8002fbc <UART_SetConfig+0x21c>
 8002f70:	4b3e      	ldr	r3, [pc, #248]	; (800306c <UART_SetConfig+0x2cc>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7e:	d017      	beq.n	8002fb0 <UART_SetConfig+0x210>
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	d817      	bhi.n	8002fb6 <UART_SetConfig+0x216>
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d00b      	beq.n	8002fa4 <UART_SetConfig+0x204>
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d811      	bhi.n	8002fb6 <UART_SetConfig+0x216>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <UART_SetConfig+0x1fe>
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9a:	d006      	beq.n	8002faa <UART_SetConfig+0x20a>
 8002f9c:	e00b      	b.n	8002fb6 <UART_SetConfig+0x216>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e0a1      	b.n	80030e8 <UART_SetConfig+0x348>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e09e      	b.n	80030e8 <UART_SetConfig+0x348>
 8002faa:	2304      	movs	r3, #4
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e09b      	b.n	80030e8 <UART_SetConfig+0x348>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e098      	b.n	80030e8 <UART_SetConfig+0x348>
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e095      	b.n	80030e8 <UART_SetConfig+0x348>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <UART_SetConfig+0x2e0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d125      	bne.n	8003012 <UART_SetConfig+0x272>
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <UART_SetConfig+0x2cc>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fd4:	d017      	beq.n	8003006 <UART_SetConfig+0x266>
 8002fd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fda:	d817      	bhi.n	800300c <UART_SetConfig+0x26c>
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe0:	d00b      	beq.n	8002ffa <UART_SetConfig+0x25a>
 8002fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe6:	d811      	bhi.n	800300c <UART_SetConfig+0x26c>
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <UART_SetConfig+0x254>
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d006      	beq.n	8003000 <UART_SetConfig+0x260>
 8002ff2:	e00b      	b.n	800300c <UART_SetConfig+0x26c>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e076      	b.n	80030e8 <UART_SetConfig+0x348>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e073      	b.n	80030e8 <UART_SetConfig+0x348>
 8003000:	2304      	movs	r3, #4
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e070      	b.n	80030e8 <UART_SetConfig+0x348>
 8003006:	2308      	movs	r3, #8
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e06d      	b.n	80030e8 <UART_SetConfig+0x348>
 800300c:	2310      	movs	r3, #16
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e06a      	b.n	80030e8 <UART_SetConfig+0x348>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <UART_SetConfig+0x2e4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d138      	bne.n	800308e <UART_SetConfig+0x2ee>
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <UART_SetConfig+0x2cc>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800302a:	d017      	beq.n	800305c <UART_SetConfig+0x2bc>
 800302c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003030:	d82a      	bhi.n	8003088 <UART_SetConfig+0x2e8>
 8003032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003036:	d00b      	beq.n	8003050 <UART_SetConfig+0x2b0>
 8003038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303c:	d824      	bhi.n	8003088 <UART_SetConfig+0x2e8>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <UART_SetConfig+0x2aa>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	d006      	beq.n	8003056 <UART_SetConfig+0x2b6>
 8003048:	e01e      	b.n	8003088 <UART_SetConfig+0x2e8>
 800304a:	2300      	movs	r3, #0
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e04b      	b.n	80030e8 <UART_SetConfig+0x348>
 8003050:	2302      	movs	r3, #2
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e048      	b.n	80030e8 <UART_SetConfig+0x348>
 8003056:	2304      	movs	r3, #4
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e045      	b.n	80030e8 <UART_SetConfig+0x348>
 800305c:	2308      	movs	r3, #8
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e042      	b.n	80030e8 <UART_SetConfig+0x348>
 8003062:	bf00      	nop
 8003064:	efff69f3 	.word	0xefff69f3
 8003068:	40011000 	.word	0x40011000
 800306c:	40023800 	.word	0x40023800
 8003070:	40004400 	.word	0x40004400
 8003074:	40004800 	.word	0x40004800
 8003078:	40004c00 	.word	0x40004c00
 800307c:	40005000 	.word	0x40005000
 8003080:	40011400 	.word	0x40011400
 8003084:	40007800 	.word	0x40007800
 8003088:	2310      	movs	r3, #16
 800308a:	77fb      	strb	r3, [r7, #31]
 800308c:	e02c      	b.n	80030e8 <UART_SetConfig+0x348>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a72      	ldr	r2, [pc, #456]	; (800325c <UART_SetConfig+0x4bc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d125      	bne.n	80030e4 <UART_SetConfig+0x344>
 8003098:	4b71      	ldr	r3, [pc, #452]	; (8003260 <UART_SetConfig+0x4c0>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030a6:	d017      	beq.n	80030d8 <UART_SetConfig+0x338>
 80030a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030ac:	d817      	bhi.n	80030de <UART_SetConfig+0x33e>
 80030ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b2:	d00b      	beq.n	80030cc <UART_SetConfig+0x32c>
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	d811      	bhi.n	80030de <UART_SetConfig+0x33e>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <UART_SetConfig+0x326>
 80030be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030c2:	d006      	beq.n	80030d2 <UART_SetConfig+0x332>
 80030c4:	e00b      	b.n	80030de <UART_SetConfig+0x33e>
 80030c6:	2300      	movs	r3, #0
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e00d      	b.n	80030e8 <UART_SetConfig+0x348>
 80030cc:	2302      	movs	r3, #2
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	e00a      	b.n	80030e8 <UART_SetConfig+0x348>
 80030d2:	2304      	movs	r3, #4
 80030d4:	77fb      	strb	r3, [r7, #31]
 80030d6:	e007      	b.n	80030e8 <UART_SetConfig+0x348>
 80030d8:	2308      	movs	r3, #8
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e004      	b.n	80030e8 <UART_SetConfig+0x348>
 80030de:	2310      	movs	r3, #16
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	e001      	b.n	80030e8 <UART_SetConfig+0x348>
 80030e4:	2310      	movs	r3, #16
 80030e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f0:	d15b      	bne.n	80031aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d828      	bhi.n	800314a <UART_SetConfig+0x3aa>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0x360>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003125 	.word	0x08003125
 8003104:	0800312d 	.word	0x0800312d
 8003108:	08003135 	.word	0x08003135
 800310c:	0800314b 	.word	0x0800314b
 8003110:	0800313b 	.word	0x0800313b
 8003114:	0800314b 	.word	0x0800314b
 8003118:	0800314b 	.word	0x0800314b
 800311c:	0800314b 	.word	0x0800314b
 8003120:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7ff f8a8 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 8003128:	61b8      	str	r0, [r7, #24]
        break;
 800312a:	e013      	b.n	8003154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff f8b8 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 8003130:	61b8      	str	r0, [r7, #24]
        break;
 8003132:	e00f      	b.n	8003154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <UART_SetConfig+0x4c4>)
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e00c      	b.n	8003154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe ff8b 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 800313e:	61b8      	str	r0, [r7, #24]
        break;
 8003140:	e008      	b.n	8003154 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	61bb      	str	r3, [r7, #24]
        break;
 8003148:	e004      	b.n	8003154 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	77bb      	strb	r3, [r7, #30]
        break;
 8003152:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d074      	beq.n	8003244 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	005a      	lsls	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d916      	bls.n	80031a4 <UART_SetConfig+0x404>
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d212      	bcs.n	80031a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f023 030f 	bic.w	r3, r3, #15
 8003186:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	b29b      	uxth	r3, r3
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	b29a      	uxth	r2, r3
 8003194:	89fb      	ldrh	r3, [r7, #14]
 8003196:	4313      	orrs	r3, r2
 8003198:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	89fa      	ldrh	r2, [r7, #14]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e04f      	b.n	8003244 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77bb      	strb	r3, [r7, #30]
 80031a8:	e04c      	b.n	8003244 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031aa:	7ffb      	ldrb	r3, [r7, #31]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d828      	bhi.n	8003202 <UART_SetConfig+0x462>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <UART_SetConfig+0x418>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031dd 	.word	0x080031dd
 80031bc:	080031e5 	.word	0x080031e5
 80031c0:	080031ed 	.word	0x080031ed
 80031c4:	08003203 	.word	0x08003203
 80031c8:	080031f3 	.word	0x080031f3
 80031cc:	08003203 	.word	0x08003203
 80031d0:	08003203 	.word	0x08003203
 80031d4:	08003203 	.word	0x08003203
 80031d8:	080031fb 	.word	0x080031fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7ff f84c 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80031e0:	61b8      	str	r0, [r7, #24]
        break;
 80031e2:	e013      	b.n	800320c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7ff f85c 	bl	80022a0 <HAL_RCC_GetPCLK2Freq>
 80031e8:	61b8      	str	r0, [r7, #24]
        break;
 80031ea:	e00f      	b.n	800320c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <UART_SetConfig+0x4c4>)
 80031ee:	61bb      	str	r3, [r7, #24]
        break;
 80031f0:	e00c      	b.n	800320c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f2:	f7fe ff2f 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 80031f6:	61b8      	str	r0, [r7, #24]
        break;
 80031f8:	e008      	b.n	800320c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fe:	61bb      	str	r3, [r7, #24]
        break;
 8003200:	e004      	b.n	800320c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	77bb      	strb	r3, [r7, #30]
        break;
 800320a:	bf00      	nop
    }

    if (pclk != 0U)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	085a      	lsrs	r2, r3, #1
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	441a      	add	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b0f      	cmp	r3, #15
 800322a:	d909      	bls.n	8003240 <UART_SetConfig+0x4a0>
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d205      	bcs.n	8003240 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	e001      	b.n	8003244 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003250:	7fbb      	ldrb	r3, [r7, #30]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40007c00 	.word	0x40007c00
 8003260:	40023800 	.word	0x40023800
 8003264:	00f42400 	.word	0x00f42400

08003268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01a      	beq.n	800337e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003366:	d10a      	bne.n	800337e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033bc:	f7fd fe6c 	bl	8001098 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d10e      	bne.n	80033ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f81b 	bl	800341a <UART_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e011      	b.n	8003412 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b09c      	sub	sp, #112	; 0x70
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342a:	e0a7      	b.n	800357c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	f000 80a3 	beq.w	800357c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fd fe2f 	bl	8001098 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <UART_WaitOnFlagUntilTimeout+0x32>
 8003446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003448:	2b00      	cmp	r3, #0
 800344a:	d13f      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800345a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003460:	667b      	str	r3, [r7, #100]	; 0x64
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800346a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003470:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e6      	bne.n	800344c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	663b      	str	r3, [r7, #96]	; 0x60
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3308      	adds	r3, #8
 800349c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800349e:	64ba      	str	r2, [r7, #72]	; 0x48
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80034a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e068      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d050      	beq.n	800357c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d148      	bne.n	800357c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003508:	66fb      	str	r3, [r7, #108]	; 0x6c
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
 8003514:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003518:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e6      	bne.n	80034f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3308      	adds	r3, #8
 800352c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	613b      	str	r3, [r7, #16]
   return(result);
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	66bb      	str	r3, [r7, #104]	; 0x68
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003546:	623a      	str	r2, [r7, #32]
 8003548:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	69f9      	ldr	r1, [r7, #28]
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	61bb      	str	r3, [r7, #24]
   return(result);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e5      	bne.n	8003526 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e010      	b.n	800359e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	429a      	cmp	r2, r3
 8003598:	f43f af48 	beq.w	800342c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3770      	adds	r7, #112	; 0x70
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a8:	b084      	sub	sp, #16
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	f107 001c 	add.w	r0, r7, #28
 80035b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d120      	bne.n	8003602 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <USB_CoreInit+0xac>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d105      	bne.n	80035f6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa96 	bl	8003b28 <USB_CoreReset>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e010      	b.n	8003624 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fa8a 	bl	8003b28 <USB_CoreReset>
 8003614:	4603      	mov	r3, r0
 8003616:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b01      	cmp	r3, #1
 8003628:	d10b      	bne.n	8003642 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f043 0206 	orr.w	r2, r3, #6
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800364e:	b004      	add	sp, #16
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	ffbdffbf 	.word	0xffbdffbf

08003658 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f023 0201 	bic.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d115      	bne.n	80036c8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036a8:	2001      	movs	r0, #1
 80036aa:	f7fd fd01 	bl	80010b0 <HAL_Delay>
      ms++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3301      	adds	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fa29 	bl	8003b0c <USB_GetMode>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d01e      	beq.n	80036fe <USB_SetCurrentMode+0x84>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b31      	cmp	r3, #49	; 0x31
 80036c4:	d9f0      	bls.n	80036a8 <USB_SetCurrentMode+0x2e>
 80036c6:	e01a      	b.n	80036fe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d115      	bne.n	80036fa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036da:	2001      	movs	r0, #1
 80036dc:	f7fd fce8 	bl	80010b0 <HAL_Delay>
      ms++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3301      	adds	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fa10 	bl	8003b0c <USB_GetMode>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <USB_SetCurrentMode+0x84>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b31      	cmp	r3, #49	; 0x31
 80036f6:	d9f0      	bls.n	80036da <USB_SetCurrentMode+0x60>
 80036f8:	e001      	b.n	80036fe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e005      	b.n	800370a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b32      	cmp	r3, #50	; 0x32
 8003702:	d101      	bne.n	8003708 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003714:	b084      	sub	sp, #16
 8003716:	b580      	push	{r7, lr}
 8003718:	b086      	sub	sp, #24
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e009      	b.n	8003748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	3340      	adds	r3, #64	; 0x40
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	2200      	movs	r2, #0
 8003740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	3301      	adds	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0e      	cmp	r3, #14
 800374c:	d9f2      	bls.n	8003734 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11c      	bne.n	800378e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e005      	b.n	800379a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037a0:	461a      	mov	r2, r3
 80037a2:	2300      	movs	r3, #0
 80037a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ac:	4619      	mov	r1, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b4:	461a      	mov	r2, r3
 80037b6:	680b      	ldr	r3, [r1, #0]
 80037b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10c      	bne.n	80037da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d104      	bne.n	80037d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80037c6:	2100      	movs	r1, #0
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f965 	bl	8003a98 <USB_SetDevSpeed>
 80037ce:	e008      	b.n	80037e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037d0:	2101      	movs	r1, #1
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f960 	bl	8003a98 <USB_SetDevSpeed>
 80037d8:	e003      	b.n	80037e2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037da:	2103      	movs	r1, #3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f95b 	bl	8003a98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80037e2:	2110      	movs	r1, #16
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8f3 	bl	80039d0 <USB_FlushTxFifo>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f91f 	bl	8003a38 <USB_FlushRxFifo>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380a:	461a      	mov	r2, r3
 800380c:	2300      	movs	r3, #0
 800380e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	461a      	mov	r2, r3
 8003818:	2300      	movs	r3, #0
 800381a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	461a      	mov	r2, r3
 8003824:	2300      	movs	r3, #0
 8003826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e043      	b.n	80038b6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003844:	d118      	bne.n	8003878 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003858:	461a      	mov	r2, r3
 800385a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	e013      	b.n	800388a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	461a      	mov	r2, r3
 8003870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e008      	b.n	800388a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a8:	461a      	mov	r2, r3
 80038aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3301      	adds	r3, #1
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3b7      	bcc.n	800382e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	e043      	b.n	800394c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038da:	d118      	bne.n	800390e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e013      	b.n	8003920 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e008      	b.n	8003920 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	2300      	movs	r3, #0
 800391e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	461a      	mov	r2, r3
 800392e:	2300      	movs	r3, #0
 8003930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	461a      	mov	r2, r3
 8003940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	3301      	adds	r3, #1
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	429a      	cmp	r2, r3
 8003952:	d3b7      	bcc.n	80038c4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003966:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003974:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <USB_DevInit+0x2b4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f043 0208 	orr.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <USB_DevInit+0x2b8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039c4:	b004      	add	sp, #16
 80039c6:	4770      	bx	lr
 80039c8:	803c3800 	.word	0x803c3800
 80039cc:	40000004 	.word	0x40000004

080039d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <USB_FlushTxFifo+0x64>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e01b      	b.n	8003a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	daf2      	bge.n	80039de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	019b      	lsls	r3, r3, #6
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a08      	ldr	r2, [pc, #32]	; (8003a34 <USB_FlushTxFifo+0x64>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d0f0      	beq.n	8003a08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	00030d40 	.word	0x00030d40

08003a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <USB_FlushRxFifo+0x5c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e018      	b.n	8003a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	daf2      	bge.n	8003a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2210      	movs	r2, #16
 8003a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <USB_FlushRxFifo+0x5c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e006      	b.n	8003a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b10      	cmp	r3, #16
 8003a84:	d0f0      	beq.n	8003a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	00030d40 	.word	0x00030d40

08003a98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	68f9      	ldr	r1, [r7, #12]
 8003ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ae4:	f023 0303 	bic.w	r3, r3, #3
 8003ae8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0301 	and.w	r3, r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <USB_CoreReset+0x64>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e01b      	b.n	8003b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	daf2      	bge.n	8003b34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <USB_CoreReset+0x64>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e006      	b.n	8003b7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d0f0      	beq.n	8003b5e <USB_CoreReset+0x36>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	00030d40 	.word	0x00030d40

08003b90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <MX_FATFS_Init+0x18>)
 8003b96:	4805      	ldr	r0, [pc, #20]	; (8003bac <MX_FATFS_Init+0x1c>)
 8003b98:	f002 fc48 	bl	800642c <FATFS_LinkDriver>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <MX_FATFS_Init+0x20>)
 8003ba2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	200007a0 	.word	0x200007a0
 8003bac:	2000000c 	.word	0x2000000c
 8003bb0:	2000079c 	.word	0x2000079c

08003bb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003bb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <USER_initialize+0x24>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <USER_initialize+0x24>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000009 	.word	0x20000009

08003bec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <USER_status+0x24>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <USER_status+0x24>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000009 	.word	0x20000009

08003c14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003c24:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003c42:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	603a      	str	r2, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	73fb      	strb	r3, [r7, #15]
    return res;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <disk_status+0x30>)
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	79fa      	ldrb	r2, [r7, #7]
 8003c8c:	4905      	ldr	r1, [pc, #20]	; (8003ca4 <disk_status+0x30>)
 8003c8e:	440a      	add	r2, r1
 8003c90:	7a12      	ldrb	r2, [r2, #8]
 8003c92:	4610      	mov	r0, r2
 8003c94:	4798      	blx	r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	200007cc 	.word	0x200007cc

08003ca8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <disk_initialize+0x48>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d111      	bne.n	8003ce4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <disk_initialize+0x48>)
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <disk_initialize+0x48>)
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	79fa      	ldrb	r2, [r7, #7]
 8003cd6:	4906      	ldr	r1, [pc, #24]	; (8003cf0 <disk_initialize+0x48>)
 8003cd8:	440a      	add	r2, r1
 8003cda:	7a12      	ldrb	r2, [r2, #8]
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4798      	blx	r3
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200007cc 	.word	0x200007cc

08003cf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	4a0a      	ldr	r2, [pc, #40]	; (8003d30 <disk_read+0x3c>)
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	689c      	ldr	r4, [r3, #8]
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <disk_read+0x3c>)
 8003d14:	4413      	add	r3, r2
 8003d16:	7a18      	ldrb	r0, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	47a0      	blx	r4
 8003d20:	4603      	mov	r3, r0
 8003d22:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd90      	pop	{r4, r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	200007cc 	.word	0x200007cc

08003d34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4603      	mov	r3, r0
 8003d42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <disk_write+0x3c>)
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68dc      	ldr	r4, [r3, #12]
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <disk_write+0x3c>)
 8003d54:	4413      	add	r3, r2
 8003d56:	7a18      	ldrb	r0, [r3, #8]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	47a0      	blx	r4
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
  return res;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200007cc 	.word	0x200007cc

08003d74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	603a      	str	r2, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
 8003d80:	460b      	mov	r3, r1
 8003d82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <disk_ioctl+0x38>)
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	79fa      	ldrb	r2, [r7, #7]
 8003d92:	4906      	ldr	r1, [pc, #24]	; (8003dac <disk_ioctl+0x38>)
 8003d94:	440a      	add	r2, r1
 8003d96:	7a10      	ldrb	r0, [r2, #8]
 8003d98:	79b9      	ldrb	r1, [r7, #6]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4798      	blx	r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	73fb      	strb	r3, [r7, #15]
  return res;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200007cc 	.word	0x200007cc

08003db0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003dc0:	89fb      	ldrh	r3, [r7, #14]
 8003dc2:	021b      	lsls	r3, r3, #8
 8003dc4:	b21a      	sxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3303      	adds	r3, #3
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	3202      	adds	r2, #2
 8003df8:	7812      	ldrb	r2, [r2, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	3201      	adds	r2, #1
 8003e06:	7812      	ldrb	r2, [r2, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	7812      	ldrb	r2, [r2, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
	return rv;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	887a      	ldrh	r2, [r7, #2]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	0a1b      	lsrs	r3, r3, #8
 8003e76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	1c53      	adds	r3, r2, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	1c59      	adds	r1, r3, #1
 8003ed8:	6179      	str	r1, [r7, #20]
 8003eda:	7812      	ldrb	r2, [r2, #0]
 8003edc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f1      	bne.n	8003ece <mem_cpy+0x1a>
	}
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003ef6:	b480      	push	{r7}
 8003ef8:	b087      	sub	sp, #28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	617a      	str	r2, [r7, #20]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f3      	bne.n	8003f06 <mem_set+0x10>
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	61fa      	str	r2, [r7, #28]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	61ba      	str	r2, [r7, #24]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	1acb      	subs	r3, r1, r3
 8003f58:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <mem_cmp+0x40>
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0eb      	beq.n	8003f44 <mem_cmp+0x18>

	return r;
 8003f6c:	697b      	ldr	r3, [r7, #20]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	; 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003f84:	e002      	b.n	8003f8c <chk_chr+0x12>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <chk_chr+0x26>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d1f2      	bne.n	8003f86 <chk_chr+0xc>
	return *str;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e029      	b.n	8004018 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003fc4:	4a27      	ldr	r2, [pc, #156]	; (8004064 <chk_lock+0xb4>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	4413      	add	r3, r2
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01d      	beq.n	800400e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003fd2:	4a24      	ldr	r2, [pc, #144]	; (8004064 <chk_lock+0xb4>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	4413      	add	r3, r2
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d116      	bne.n	8004012 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003fe4:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <chk_lock+0xb4>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d10c      	bne.n	8004012 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <chk_lock+0xb4>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	4413      	add	r3, r2
 8004000:	3308      	adds	r3, #8
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004008:	429a      	cmp	r2, r3
 800400a:	d102      	bne.n	8004012 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800400c:	e007      	b.n	800401e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800400e:	2301      	movs	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d9d2      	bls.n	8003fc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d109      	bne.n	8004038 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <chk_lock+0x80>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d101      	bne.n	8004034 <chk_lock+0x84>
 8004030:	2300      	movs	r3, #0
 8004032:	e010      	b.n	8004056 <chk_lock+0xa6>
 8004034:	2312      	movs	r3, #18
 8004036:	e00e      	b.n	8004056 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <chk_lock+0xa0>
 800403e:	4a09      	ldr	r2, [pc, #36]	; (8004064 <chk_lock+0xb4>)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	4413      	add	r3, r2
 8004046:	330c      	adds	r3, #12
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d101      	bne.n	8004054 <chk_lock+0xa4>
 8004050:	2310      	movs	r3, #16
 8004052:	e000      	b.n	8004056 <chk_lock+0xa6>
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200007ac 	.word	0x200007ac

08004068 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800406e:	2300      	movs	r3, #0
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	e002      	b.n	800407a <enq_lock+0x12>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3301      	adds	r3, #1
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d806      	bhi.n	800408e <enq_lock+0x26>
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <enq_lock+0x40>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	4413      	add	r3, r2
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f2      	bne.n	8004074 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b02      	cmp	r3, #2
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	200007ac 	.word	0x200007ac

080040ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e01f      	b.n	80040fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80040bc:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <inc_lock+0x118>)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	4413      	add	r3, r2
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d113      	bne.n	80040f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80040ce:	4a3d      	ldr	r2, [pc, #244]	; (80041c4 <inc_lock+0x118>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	4413      	add	r3, r2
 80040d6:	3304      	adds	r3, #4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80040de:	429a      	cmp	r2, r3
 80040e0:	d109      	bne.n	80040f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80040e2:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <inc_lock+0x118>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	4413      	add	r3, r2
 80040ea:	3308      	adds	r3, #8
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d006      	beq.n	8004104 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3301      	adds	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d9dc      	bls.n	80040bc <inc_lock+0x10>
 8004102:	e000      	b.n	8004106 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004104:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d132      	bne.n	8004172 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e002      	b.n	8004118 <inc_lock+0x6c>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3301      	adds	r3, #1
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d806      	bhi.n	800412c <inc_lock+0x80>
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <inc_lock+0x118>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	4413      	add	r3, r2
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f2      	bne.n	8004112 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d101      	bne.n	8004136 <inc_lock+0x8a>
 8004132:	2300      	movs	r3, #0
 8004134:	e040      	b.n	80041b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4922      	ldr	r1, [pc, #136]	; (80041c4 <inc_lock+0x118>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	440b      	add	r3, r1
 8004142:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	491e      	ldr	r1, [pc, #120]	; (80041c4 <inc_lock+0x118>)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	440b      	add	r3, r1
 8004150:	3304      	adds	r3, #4
 8004152:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	491a      	ldr	r1, [pc, #104]	; (80041c4 <inc_lock+0x118>)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	440b      	add	r3, r1
 8004160:	3308      	adds	r3, #8
 8004162:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <inc_lock+0x118>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	4413      	add	r3, r2
 800416c:	330c      	adds	r3, #12
 800416e:	2200      	movs	r2, #0
 8004170:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <inc_lock+0xe0>
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <inc_lock+0x118>)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	330c      	adds	r3, #12
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <inc_lock+0xe0>
 8004188:	2300      	movs	r3, #0
 800418a:	e015      	b.n	80041b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d108      	bne.n	80041a4 <inc_lock+0xf8>
 8004192:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <inc_lock+0x118>)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	4413      	add	r3, r2
 800419a:	330c      	adds	r3, #12
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	e001      	b.n	80041a8 <inc_lock+0xfc>
 80041a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a8:	4906      	ldr	r1, [pc, #24]	; (80041c4 <inc_lock+0x118>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	440b      	add	r3, r1
 80041b0:	330c      	adds	r3, #12
 80041b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3301      	adds	r3, #1
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	200007ac 	.word	0x200007ac

080041c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d825      	bhi.n	8004228 <dec_lock+0x60>
		n = Files[i].ctr;
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <dec_lock+0x74>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	4413      	add	r3, r2
 80041e4:	330c      	adds	r3, #12
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80041ea:	89fb      	ldrh	r3, [r7, #14]
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f0:	d101      	bne.n	80041f6 <dec_lock+0x2e>
 80041f2:	2300      	movs	r3, #0
 80041f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <dec_lock+0x3a>
 80041fc:	89fb      	ldrh	r3, [r7, #14]
 80041fe:	3b01      	subs	r3, #1
 8004200:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004202:	4a0e      	ldr	r2, [pc, #56]	; (800423c <dec_lock+0x74>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	4413      	add	r3, r2
 800420a:	330c      	adds	r3, #12
 800420c:	89fa      	ldrh	r2, [r7, #14]
 800420e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004210:	89fb      	ldrh	r3, [r7, #14]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d105      	bne.n	8004222 <dec_lock+0x5a>
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <dec_lock+0x74>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	4413      	add	r3, r2
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	737b      	strb	r3, [r7, #13]
 8004226:	e001      	b.n	800422c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004228:	2302      	movs	r3, #2
 800422a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800422c:	7b7b      	ldrb	r3, [r7, #13]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200007ac 	.word	0x200007ac

08004240 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e010      	b.n	8004270 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800424e:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <clear_lock+0x44>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	4413      	add	r3, r2
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	429a      	cmp	r2, r3
 800425c:	d105      	bne.n	800426a <clear_lock+0x2a>
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <clear_lock+0x44>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	4413      	add	r3, r2
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d9eb      	bls.n	800424e <clear_lock+0xe>
	}
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	200007ac 	.word	0x200007ac

08004288 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	78db      	ldrb	r3, [r3, #3]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d034      	beq.n	8004306 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7858      	ldrb	r0, [r3, #1]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80042ac:	2301      	movs	r3, #1
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	f7ff fd40 	bl	8003d34 <disk_write>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	73fb      	strb	r3, [r7, #15]
 80042be:	e022      	b.n	8004306 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	1ad2      	subs	r2, r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d217      	bcs.n	8004306 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	789b      	ldrb	r3, [r3, #2]
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e010      	b.n	8004300 <sync_window+0x78>
					wsect += fs->fsize;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4413      	add	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7858      	ldrb	r0, [r3, #1]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80042f2:	2301      	movs	r3, #1
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	f7ff fd1d 	bl	8003d34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d8eb      	bhi.n	80042de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d01b      	beq.n	8004360 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ffad 	bl	8004288 <sync_window>
 800432e:	4603      	mov	r3, r0
 8004330:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d113      	bne.n	8004360 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7858      	ldrb	r0, [r3, #1]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004342:	2301      	movs	r3, #1
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	f7ff fcd5 	bl	8003cf4 <disk_read>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004350:	f04f 33ff 	mov.w	r3, #4294967295
 8004354:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff87 	bl	8004288 <sync_window>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d158      	bne.n	8004436 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d148      	bne.n	800441e <sync_fs+0xb2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	791b      	ldrb	r3, [r3, #4]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d144      	bne.n	800441e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3330      	adds	r3, #48	; 0x30
 8004398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fda9 	bl	8003ef6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3330      	adds	r3, #48	; 0x30
 80043a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80043ac:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fd38 	bl	8003e26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3330      	adds	r3, #48	; 0x30
 80043ba:	4921      	ldr	r1, [pc, #132]	; (8004440 <sync_fs+0xd4>)
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff fd4d 	bl	8003e5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3330      	adds	r3, #48	; 0x30
 80043c6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80043ca:	491e      	ldr	r1, [pc, #120]	; (8004444 <sync_fs+0xd8>)
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fd45 	bl	8003e5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3330      	adds	r3, #48	; 0x30
 80043d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7ff fd3b 	bl	8003e5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3330      	adds	r3, #48	; 0x30
 80043ea:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7ff fd31 	bl	8003e5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	7858      	ldrb	r0, [r3, #1]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	2301      	movs	r3, #1
 8004414:	f7ff fc8e 	bl	8003d34 <disk_write>
			fs->fsi_flag = 0;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	2200      	movs	r2, #0
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fca4 	bl	8003d74 <disk_ioctl>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <sync_fs+0xca>
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	41615252 	.word	0x41615252
 8004444:	61417272 	.word	0x61417272

08004448 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3b02      	subs	r3, #2
 8004456:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	3b02      	subs	r3, #2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d301      	bcc.n	8004468 <clust2sect+0x20>
 8004464:	2300      	movs	r3, #0
 8004466:	e008      	b.n	800447a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	895b      	ldrh	r3, [r3, #10]
 800446c:	461a      	mov	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	fb03 f202 	mul.w	r2, r3, r2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	4413      	add	r3, r2
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d904      	bls.n	80044a6 <get_fat+0x20>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80044a6:	2301      	movs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e08f      	b.n	80045cc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80044ac:	f04f 33ff 	mov.w	r3, #4294967295
 80044b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d062      	beq.n	8004580 <get_fat+0xfa>
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	dc7c      	bgt.n	80045b8 <get_fat+0x132>
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d002      	beq.n	80044c8 <get_fat+0x42>
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d042      	beq.n	800454c <get_fat+0xc6>
 80044c6:	e077      	b.n	80045b8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	0a5b      	lsrs	r3, r3, #9
 80044de:	4413      	add	r3, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	6938      	ldr	r0, [r7, #16]
 80044e4:	f7ff ff14 	bl	8004310 <move_window>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d167      	bne.n	80045be <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004500:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	6a1a      	ldr	r2, [r3, #32]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	4413      	add	r3, r2
 800450c:	4619      	mov	r1, r3
 800450e:	6938      	ldr	r0, [r7, #16]
 8004510:	f7ff fefe 	bl	8004310 <move_window>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d153      	bne.n	80045c2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4313      	orrs	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <get_fat+0xbc>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	e002      	b.n	8004548 <get_fat+0xc2>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	617b      	str	r3, [r7, #20]
			break;
 800454a:	e03f      	b.n	80045cc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	4413      	add	r3, r2
 8004556:	4619      	mov	r1, r3
 8004558:	6938      	ldr	r0, [r7, #16]
 800455a:	f7ff fed9 	bl	8004310 <move_window>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d130      	bne.n	80045c6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004572:	4413      	add	r3, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fc1b 	bl	8003db0 <ld_word>
 800457a:	4603      	mov	r3, r0
 800457c:	617b      	str	r3, [r7, #20]
			break;
 800457e:	e025      	b.n	80045cc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	09db      	lsrs	r3, r3, #7
 8004588:	4413      	add	r3, r2
 800458a:	4619      	mov	r1, r3
 800458c:	6938      	ldr	r0, [r7, #16]
 800458e:	f7ff febf 	bl	8004310 <move_window>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d118      	bne.n	80045ca <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80045a6:	4413      	add	r3, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fc19 	bl	8003de0 <ld_dword>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045b4:	617b      	str	r3, [r7, #20]
			break;
 80045b6:	e009      	b.n	80045cc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80045b8:	2301      	movs	r3, #1
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e006      	b.n	80045cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045be:	bf00      	nop
 80045c0:	e004      	b.n	80045cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045c2:	bf00      	nop
 80045c4:	e002      	b.n	80045cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80045c6:	bf00      	nop
 80045c8:	e000      	b.n	80045cc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80045ca:	bf00      	nop
		}
	}

	return val;
 80045cc:	697b      	ldr	r3, [r7, #20]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80045d6:	b590      	push	{r4, r7, lr}
 80045d8:	b089      	sub	sp, #36	; 0x24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80045e2:	2302      	movs	r3, #2
 80045e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f240 80d2 	bls.w	8004792 <put_fat+0x1bc>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f080 80cc 	bcs.w	8004792 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	f000 8096 	beq.w	8004730 <put_fat+0x15a>
 8004604:	2b03      	cmp	r3, #3
 8004606:	f300 80cd 	bgt.w	80047a4 <put_fat+0x1ce>
 800460a:	2b01      	cmp	r3, #1
 800460c:	d002      	beq.n	8004614 <put_fat+0x3e>
 800460e:	2b02      	cmp	r3, #2
 8004610:	d06e      	beq.n	80046f0 <put_fat+0x11a>
 8004612:	e0c7      	b.n	80047a4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4413      	add	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	0a5b      	lsrs	r3, r3, #9
 800462a:	4413      	add	r3, r2
 800462c:	4619      	mov	r1, r3
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fe6e 	bl	8004310 <move_window>
 8004634:	4603      	mov	r3, r0
 8004636:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004638:	7ffb      	ldrb	r3, [r7, #31]
 800463a:	2b00      	cmp	r3, #0
 800463c:	f040 80ab 	bne.w	8004796 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	61b9      	str	r1, [r7, #24]
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00d      	beq.n	800467a <put_fat+0xa4>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b25b      	sxtb	r3, r3
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	b25a      	sxtb	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	b25b      	sxtb	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b25b      	sxtb	r3, r3
 8004676:	b2db      	uxtb	r3, r3
 8004678:	e001      	b.n	800467e <put_fat+0xa8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	0a5b      	lsrs	r3, r3, #9
 8004690:	4413      	add	r3, r2
 8004692:	4619      	mov	r1, r3
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7ff fe3b 	bl	8004310 <move_window>
 800469a:	4603      	mov	r3, r0
 800469c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800469e:	7ffb      	ldrb	r3, [r7, #31]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d17a      	bne.n	800479a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b0:	4413      	add	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <put_fat+0xf0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e00e      	b.n	80046e4 <put_fat+0x10e>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	f023 030f 	bic.w	r3, r3, #15
 80046d0:	b25a      	sxtb	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0a1b      	lsrs	r3, r3, #8
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	b25b      	sxtb	r3, r3
 80046de:	4313      	orrs	r3, r2
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	70da      	strb	r2, [r3, #3]
			break;
 80046ee:	e059      	b.n	80047a4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a1a      	ldr	r2, [r3, #32]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	4413      	add	r3, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff fe07 	bl	8004310 <move_window>
 8004702:	4603      	mov	r3, r0
 8004704:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004706:	7ffb      	ldrb	r3, [r7, #31]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d148      	bne.n	800479e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800471a:	4413      	add	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	b292      	uxth	r2, r2
 8004720:	4611      	mov	r1, r2
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fb7f 	bl	8003e26 <st_word>
			fs->wflag = 1;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	70da      	strb	r2, [r3, #3]
			break;
 800472e:	e039      	b.n	80047a4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	09db      	lsrs	r3, r3, #7
 8004738:	4413      	add	r3, r2
 800473a:	4619      	mov	r1, r3
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fde7 	bl	8004310 <move_window>
 8004742:	4603      	mov	r3, r0
 8004744:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004746:	7ffb      	ldrb	r3, [r7, #31]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d12a      	bne.n	80047a2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004760:	4413      	add	r3, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fb3c 	bl	8003de0 <ld_dword>
 8004768:	4603      	mov	r3, r0
 800476a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800476e:	4323      	orrs	r3, r4
 8004770:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004780:	4413      	add	r3, r2
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fb69 	bl	8003e5c <st_dword>
			fs->wflag = 1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	70da      	strb	r2, [r3, #3]
			break;
 8004790:	e008      	b.n	80047a4 <put_fat+0x1ce>
		}
	}
 8004792:	bf00      	nop
 8004794:	e006      	b.n	80047a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004796:	bf00      	nop
 8004798:	e004      	b.n	80047a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80047a2:	bf00      	nop
	return res;
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd90      	pop	{r4, r7, pc}

080047ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b088      	sub	sp, #32
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d904      	bls.n	80047d4 <remove_chain+0x26>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d301      	bcc.n	80047d8 <remove_chain+0x2a>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e04b      	b.n	8004870 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	f7ff fef6 	bl	80045d6 <put_fat>
 80047ea:	4603      	mov	r3, r0
 80047ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80047ee:	7ffb      	ldrb	r3, [r7, #31]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <remove_chain+0x4a>
 80047f4:	7ffb      	ldrb	r3, [r7, #31]
 80047f6:	e03b      	b.n	8004870 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f7ff fe43 	bl	8004486 <get_fat>
 8004800:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d031      	beq.n	800486c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <remove_chain+0x64>
 800480e:	2302      	movs	r3, #2
 8004810:	e02e      	b.n	8004870 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d101      	bne.n	800481e <remove_chain+0x70>
 800481a:	2301      	movs	r3, #1
 800481c:	e028      	b.n	8004870 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800481e:	2200      	movs	r2, #0
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	69b8      	ldr	r0, [r7, #24]
 8004824:	f7ff fed7 	bl	80045d6 <put_fat>
 8004828:	4603      	mov	r3, r0
 800482a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <remove_chain+0x88>
 8004832:	7ffb      	ldrb	r3, [r7, #31]
 8004834:	e01c      	b.n	8004870 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	691a      	ldr	r2, [r3, #16]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	3b02      	subs	r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d20b      	bcs.n	800485c <remove_chain+0xae>
			fs->free_clst++;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	791b      	ldrb	r3, [r3, #4]
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	b2da      	uxtb	r2, r3
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d3c6      	bcc.n	80047f8 <remove_chain+0x4a>
 800486a:	e000      	b.n	800486e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800486c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d004      	beq.n	80048a4 <create_chain+0x2c>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d31b      	bcc.n	80048dc <create_chain+0x64>
 80048a4:	2301      	movs	r3, #1
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e018      	b.n	80048dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80048aa:	6839      	ldr	r1, [r7, #0]
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fdea 	bl	8004486 <get_fat>
 80048b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d801      	bhi.n	80048be <create_chain+0x46>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e070      	b.n	80049a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d101      	bne.n	80048ca <create_chain+0x52>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	e06a      	b.n	80049a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d201      	bcs.n	80048d8 <create_chain+0x60>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	e063      	b.n	80049a0 <create_chain+0x128>
		scl = clst;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d307      	bcc.n	8004900 <create_chain+0x88>
				ncl = 2;
 80048f0:	2302      	movs	r3, #2
 80048f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d901      	bls.n	8004900 <create_chain+0x88>
 80048fc:	2300      	movs	r3, #0
 80048fe:	e04f      	b.n	80049a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fdbf 	bl	8004486 <get_fat>
 8004908:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d003      	beq.n	800491e <create_chain+0xa6>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d101      	bne.n	8004922 <create_chain+0xaa>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	e03e      	b.n	80049a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	429a      	cmp	r2, r3
 8004928:	d1da      	bne.n	80048e0 <create_chain+0x68>
 800492a:	2300      	movs	r3, #0
 800492c:	e038      	b.n	80049a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800492e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	69f9      	ldr	r1, [r7, #28]
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f7ff fe4d 	bl	80045d6 <put_fat>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <create_chain+0xe2>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d006      	beq.n	800495a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	6938      	ldr	r0, [r7, #16]
 8004952:	f7ff fe40 	bl	80045d6 <put_fat>
 8004956:	4603      	mov	r3, r0
 8004958:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <create_chain+0x116>
		fs->last_clst = ncl;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	3b02      	subs	r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d804      	bhi.n	800497e <create_chain+0x106>
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	791b      	ldrb	r3, [r3, #4]
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	b2da      	uxtb	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	711a      	strb	r2, [r3, #4]
 800498c:	e007      	b.n	800499e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <create_chain+0x122>
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	e000      	b.n	800499c <create_chain+0x124>
 800499a:	2301      	movs	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800499e:	69fb      	ldr	r3, [r7, #28]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	3304      	adds	r3, #4
 80049be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	0a5b      	lsrs	r3, r3, #9
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	8952      	ldrh	r2, [r2, #10]
 80049c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1d1a      	adds	r2, r3, #4
 80049d2:	613a      	str	r2, [r7, #16]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <clmt_clust+0x3a>
 80049de:	2300      	movs	r3, #0
 80049e0:	e010      	b.n	8004a04 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d307      	bcc.n	80049fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3304      	adds	r3, #4
 80049f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80049f8:	e7e9      	b.n	80049ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80049fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a26:	d204      	bcs.n	8004a32 <dir_sdi+0x22>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004a32:	2302      	movs	r3, #2
 8004a34:	e063      	b.n	8004afe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <dir_sdi+0x46>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d902      	bls.n	8004a56 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10c      	bne.n	8004a76 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	8912      	ldrh	r2, [r2, #8]
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d301      	bcc.n	8004a6c <dir_sdi+0x5c>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e048      	b.n	8004afe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	61da      	str	r2, [r3, #28]
 8004a74:	e029      	b.n	8004aca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	895b      	ldrh	r3, [r3, #10]
 8004a7a:	025b      	lsls	r3, r3, #9
 8004a7c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a7e:	e019      	b.n	8004ab4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6979      	ldr	r1, [r7, #20]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fcfe 	bl	8004486 <get_fat>
 8004a8a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d101      	bne.n	8004a98 <dir_sdi+0x88>
 8004a94:	2301      	movs	r3, #1
 8004a96:	e032      	b.n	8004afe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d904      	bls.n	8004aa8 <dir_sdi+0x98>
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d301      	bcc.n	8004aac <dir_sdi+0x9c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e028      	b.n	8004afe <dir_sdi+0xee>
			ofs -= csz;
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d2e1      	bcs.n	8004a80 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004abc:	6979      	ldr	r1, [r7, #20]
 8004abe:	6938      	ldr	r0, [r7, #16]
 8004ac0:	f7ff fcc2 	bl	8004448 <clust2sect>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <dir_sdi+0xcc>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e010      	b.n	8004afe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	0a5b      	lsrs	r3, r3, #9
 8004ae4:	441a      	add	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	3320      	adds	r3, #32
 8004b1c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <dir_next+0x28>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b2c:	d301      	bcc.n	8004b32 <dir_next+0x2c>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	e0aa      	b.n	8004c88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 8098 	bne.w	8004c6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	8912      	ldrh	r2, [r2, #8]
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	f0c0 8088 	bcc.w	8004c6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	61da      	str	r2, [r3, #28]
 8004b64:	2304      	movs	r3, #4
 8004b66:	e08f      	b.n	8004c88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	0a5b      	lsrs	r3, r3, #9
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	8952      	ldrh	r2, [r2, #10]
 8004b70:	3a01      	subs	r2, #1
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d17a      	bne.n	8004c6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f7ff fc80 	bl	8004486 <get_fat>
 8004b86:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d801      	bhi.n	8004b92 <dir_next+0x8c>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e07a      	b.n	8004c88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d101      	bne.n	8004b9e <dir_next+0x98>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e074      	b.n	8004c88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d358      	bcc.n	8004c5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	61da      	str	r2, [r3, #28]
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e067      	b.n	8004c88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7ff fe59 	bl	8004878 <create_chain>
 8004bc6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <dir_next+0xcc>
 8004bce:	2307      	movs	r3, #7
 8004bd0:	e05a      	b.n	8004c88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <dir_next+0xd6>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e055      	b.n	8004c88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d101      	bne.n	8004be8 <dir_next+0xe2>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e04f      	b.n	8004c88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff fb4d 	bl	8004288 <sync_window>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <dir_next+0xf2>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e047      	b.n	8004c88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3330      	adds	r3, #48	; 0x30
 8004bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f977 	bl	8003ef6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f7ff fc1a 	bl	8004448 <clust2sect>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c1a:	e012      	b.n	8004c42 <dir_next+0x13c>
						fs->wflag = 1;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f7ff fb30 	bl	8004288 <sync_window>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <dir_next+0x12c>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e02a      	b.n	8004c88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3301      	adds	r3, #1
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	895b      	ldrh	r3, [r3, #10]
 8004c46:	461a      	mov	r2, r3
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d3e6      	bcc.n	8004c1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad2      	subs	r2, r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004c60:	6979      	ldr	r1, [r7, #20]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fbf0 	bl	8004448 <clust2sect>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff feb4 	bl	8004a10 <dir_sdi>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d12b      	bne.n	8004d0a <dir_alloc+0x7a>
		n = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7ff fb27 	bl	8004310 <move_window>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11d      	bne.n	8004d08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2be5      	cmp	r3, #229	; 0xe5
 8004cd4:	d004      	beq.n	8004ce0 <dir_alloc+0x50>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d107      	bne.n	8004cf0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d102      	bne.n	8004cf4 <dir_alloc+0x64>
 8004cee:	e00c      	b.n	8004d0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff05 	bl	8004b06 <dir_next>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0d7      	beq.n	8004cb6 <dir_alloc+0x26>
 8004d06:	e000      	b.n	8004d0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004d08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d101      	bne.n	8004d14 <dir_alloc+0x84>
 8004d10:	2307      	movs	r3, #7
 8004d12:	75fb      	strb	r3, [r7, #23]
	return res;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	331a      	adds	r3, #26
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff f83f 	bl	8003db0 <ld_word>
 8004d32:	4603      	mov	r3, r0
 8004d34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d109      	bne.n	8004d52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	3314      	adds	r3, #20
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff f834 	bl	8003db0 <ld_word>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	041b      	lsls	r3, r3, #16
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004d52:	68fb      	ldr	r3, [r7, #12]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	331a      	adds	r3, #26
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff f857 	bl	8003e26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d109      	bne.n	8004d94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f103 0214 	add.w	r2, r3, #20
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f7ff f849 	bl	8003e26 <st_word>
	}
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004daa:	2100      	movs	r1, #0
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fe2f 	bl	8004a10 <dir_sdi>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <dir_find+0x24>
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	e03e      	b.n	8004e3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6938      	ldr	r0, [r7, #16]
 8004dc8:	f7ff faa2 	bl	8004310 <move_window>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d12f      	bne.n	8004e36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <dir_find+0x4e>
 8004de4:	2304      	movs	r3, #4
 8004de6:	75fb      	strb	r3, [r7, #23]
 8004de8:	e028      	b.n	8004e3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	330b      	adds	r3, #11
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	330b      	adds	r3, #11
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <dir_find+0x86>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a18      	ldr	r0, [r3, #32]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	220b      	movs	r2, #11
 8004e16:	4619      	mov	r1, r3
 8004e18:	f7ff f888 	bl	8003f2c <mem_cmp>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00b      	beq.n	8004e3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004e22:	2100      	movs	r1, #0
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fe6e 	bl	8004b06 <dir_next>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0c5      	beq.n	8004dc0 <dir_find+0x24>
 8004e34:	e002      	b.n	8004e3c <dir_find+0xa0>
		if (res != FR_OK) break;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004e3a:	bf00      	nop

	return res;
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004e54:	2101      	movs	r1, #1
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff ff1a 	bl	8004c90 <dir_alloc>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11c      	bne.n	8004ea0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	68b8      	ldr	r0, [r7, #8]
 8004e6e:	f7ff fa4f 	bl	8004310 <move_window>
 8004e72:	4603      	mov	r3, r0
 8004e74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d111      	bne.n	8004ea0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	2220      	movs	r2, #32
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff f836 	bl	8003ef6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a18      	ldr	r0, [r3, #32]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3324      	adds	r3, #36	; 0x24
 8004e92:	220b      	movs	r2, #11
 8004e94:	4619      	mov	r1, r3
 8004e96:	f7ff f80d 	bl	8003eb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3324      	adds	r3, #36	; 0x24
 8004ec0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004ec2:	220b      	movs	r2, #11
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	68b8      	ldr	r0, [r7, #8]
 8004ec8:	f7ff f815 	bl	8003ef6 <mem_set>
	si = i = 0; ni = 8;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	61fa      	str	r2, [r7, #28]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004ee6:	7efb      	ldrb	r3, [r7, #27]
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d94e      	bls.n	8004f8a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004eec:	7efb      	ldrb	r3, [r7, #27]
 8004eee:	2b2f      	cmp	r3, #47	; 0x2f
 8004ef0:	d006      	beq.n	8004f00 <create_name+0x54>
 8004ef2:	7efb      	ldrb	r3, [r7, #27]
 8004ef4:	2b5c      	cmp	r3, #92	; 0x5c
 8004ef6:	d110      	bne.n	8004f1a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004ef8:	e002      	b.n	8004f00 <create_name+0x54>
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	3301      	adds	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b2f      	cmp	r3, #47	; 0x2f
 8004f0a:	d0f6      	beq.n	8004efa <create_name+0x4e>
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b5c      	cmp	r3, #92	; 0x5c
 8004f16:	d0f0      	beq.n	8004efa <create_name+0x4e>
			break;
 8004f18:	e038      	b.n	8004f8c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004f1a:	7efb      	ldrb	r3, [r7, #27]
 8004f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1e:	d003      	beq.n	8004f28 <create_name+0x7c>
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d30c      	bcc.n	8004f42 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b0b      	cmp	r3, #11
 8004f2c:	d002      	beq.n	8004f34 <create_name+0x88>
 8004f2e:	7efb      	ldrb	r3, [r7, #27]
 8004f30:	2b2e      	cmp	r3, #46	; 0x2e
 8004f32:	d001      	beq.n	8004f38 <create_name+0x8c>
 8004f34:	2306      	movs	r3, #6
 8004f36:	e044      	b.n	8004fc2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004f38:	2308      	movs	r3, #8
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	230b      	movs	r3, #11
 8004f3e:	617b      	str	r3, [r7, #20]
			continue;
 8004f40:	e022      	b.n	8004f88 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004f42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	da04      	bge.n	8004f54 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004f4a:	7efb      	ldrb	r3, [r7, #27]
 8004f4c:	3b80      	subs	r3, #128	; 0x80
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <create_name+0x120>)
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004f54:	7efb      	ldrb	r3, [r7, #27]
 8004f56:	4619      	mov	r1, r3
 8004f58:	481d      	ldr	r0, [pc, #116]	; (8004fd0 <create_name+0x124>)
 8004f5a:	f7ff f80e 	bl	8003f7a <chk_chr>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <create_name+0xbc>
 8004f64:	2306      	movs	r3, #6
 8004f66:	e02c      	b.n	8004fc2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004f68:	7efb      	ldrb	r3, [r7, #27]
 8004f6a:	2b60      	cmp	r3, #96	; 0x60
 8004f6c:	d905      	bls.n	8004f7a <create_name+0xce>
 8004f6e:	7efb      	ldrb	r3, [r7, #27]
 8004f70:	2b7a      	cmp	r3, #122	; 0x7a
 8004f72:	d802      	bhi.n	8004f7a <create_name+0xce>
 8004f74:	7efb      	ldrb	r3, [r7, #27]
 8004f76:	3b20      	subs	r3, #32
 8004f78:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	613a      	str	r2, [r7, #16]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4413      	add	r3, r2
 8004f84:	7efa      	ldrb	r2, [r7, #27]
 8004f86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004f88:	e7a6      	b.n	8004ed8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004f8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	441a      	add	r2, r3
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <create_name+0xf4>
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	e010      	b.n	8004fc2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2be5      	cmp	r3, #229	; 0xe5
 8004fa6:	d102      	bne.n	8004fae <create_name+0x102>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2205      	movs	r2, #5
 8004fac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004fae:	7efb      	ldrb	r3, [r7, #27]
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d801      	bhi.n	8004fb8 <create_name+0x10c>
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	e000      	b.n	8004fba <create_name+0x10e>
 8004fb8:	2200      	movs	r2, #0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	330b      	adds	r3, #11
 8004fbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004fc0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	08006fec 	.word	0x08006fec
 8004fd0:	08006f90 	.word	0x08006f90

08004fd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004fe8:	e002      	b.n	8004ff0 <follow_path+0x1c>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b2f      	cmp	r3, #47	; 0x2f
 8004ff6:	d0f8      	beq.n	8004fea <follow_path+0x16>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8004ffe:	d0f4      	beq.n	8004fea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b1f      	cmp	r3, #31
 800500c:	d80a      	bhi.n	8005024 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2280      	movs	r2, #128	; 0x80
 8005012:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005016:	2100      	movs	r1, #0
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fcf9 	bl	8004a10 <dir_sdi>
 800501e:	4603      	mov	r3, r0
 8005020:	75fb      	strb	r3, [r7, #23]
 8005022:	e043      	b.n	80050ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005024:	463b      	mov	r3, r7
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff3f 	bl	8004eac <create_name>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d134      	bne.n	80050a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff feaf 	bl	8004d9c <dir_find>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005048:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d127      	bne.n	80050a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005056:	7afb      	ldrb	r3, [r7, #11]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d122      	bne.n	80050a6 <follow_path+0xd2>
 8005060:	2305      	movs	r3, #5
 8005062:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005064:	e01f      	b.n	80050a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005066:	7afb      	ldrb	r3, [r7, #11]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11c      	bne.n	80050aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	799b      	ldrb	r3, [r3, #6]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800507c:	2305      	movs	r3, #5
 800507e:	75fb      	strb	r3, [r7, #23]
 8005080:	e014      	b.n	80050ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	4413      	add	r3, r2
 8005092:	4619      	mov	r1, r3
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7ff fe42 	bl	8004d1e <ld_clust>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80050a0:	e7c0      	b.n	8005024 <follow_path+0x50>
			if (res != FR_OK) break;
 80050a2:	bf00      	nop
 80050a4:	e002      	b.n	80050ac <follow_path+0xd8>
				break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80050aa:	bf00      	nop
			}
		}
	}

	return res;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295
 80050c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d031      	beq.n	8005130 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e002      	b.n	80050da <get_ldnumber+0x24>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3301      	adds	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d903      	bls.n	80050ea <get_ldnumber+0x34>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b3a      	cmp	r3, #58	; 0x3a
 80050e8:	d1f4      	bne.n	80050d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b3a      	cmp	r3, #58	; 0x3a
 80050f0:	d11c      	bne.n	800512c <get_ldnumber+0x76>
			tp = *path;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	60fa      	str	r2, [r7, #12]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	3b30      	subs	r3, #48	; 0x30
 8005102:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b09      	cmp	r3, #9
 8005108:	d80e      	bhi.n	8005128 <get_ldnumber+0x72>
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	429a      	cmp	r2, r3
 8005110:	d10a      	bne.n	8005128 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <get_ldnumber+0x72>
					vol = (int)i;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	e002      	b.n	8005132 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005130:	693b      	ldr	r3, [r7, #16]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	70da      	strb	r2, [r3, #3]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005158:	6839      	ldr	r1, [r7, #0]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff f8d8 	bl	8004310 <move_window>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <check_fs+0x2a>
 8005166:	2304      	movs	r3, #4
 8005168:	e038      	b.n	80051dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3330      	adds	r3, #48	; 0x30
 800516e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fe1c 	bl	8003db0 <ld_word>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <check_fs+0x48>
 8005184:	2303      	movs	r3, #3
 8005186:	e029      	b.n	80051dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800518e:	2be9      	cmp	r3, #233	; 0xe9
 8005190:	d009      	beq.n	80051a6 <check_fs+0x66>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005198:	2beb      	cmp	r3, #235	; 0xeb
 800519a:	d11e      	bne.n	80051da <check_fs+0x9a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80051a2:	2b90      	cmp	r3, #144	; 0x90
 80051a4:	d119      	bne.n	80051da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3330      	adds	r3, #48	; 0x30
 80051aa:	3336      	adds	r3, #54	; 0x36
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fe17 	bl	8003de0 <ld_dword>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051b8:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <check_fs+0xa4>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <check_fs+0x82>
 80051be:	2300      	movs	r3, #0
 80051c0:	e00c      	b.n	80051dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3330      	adds	r3, #48	; 0x30
 80051c6:	3352      	adds	r3, #82	; 0x52
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe fe09 	bl	8003de0 <ld_dword>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <check_fs+0xa8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <check_fs+0x9a>
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80051da:	2302      	movs	r3, #2
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	00544146 	.word	0x00544146
 80051e8:	33544146 	.word	0x33544146

080051ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b096      	sub	sp, #88	; 0x58
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff ff58 	bl	80050b6 <get_ldnumber>
 8005206:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	da01      	bge.n	8005212 <find_volume+0x26>
 800520e:	230b      	movs	r3, #11
 8005210:	e22d      	b.n	800566e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005212:	4aa1      	ldr	r2, [pc, #644]	; (8005498 <find_volume+0x2ac>)
 8005214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <find_volume+0x3a>
 8005222:	230c      	movs	r3, #12
 8005224:	e223      	b.n	800566e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01a      	beq.n	8005272 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	4618      	mov	r0, r3
 8005242:	f7fe fd17 	bl	8003c74 <disk_status>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800524c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10c      	bne.n	8005272 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <find_volume+0x82>
 800525e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800526a:	230a      	movs	r3, #10
 800526c:	e1ff      	b.n	800566e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800526e:	2300      	movs	r3, #0
 8005270:	e1fd      	b.n	800566e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527a:	b2da      	uxtb	r2, r3
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	785b      	ldrb	r3, [r3, #1]
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fd0f 	bl	8003ca8 <disk_initialize>
 800528a:	4603      	mov	r3, r0
 800528c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800529c:	2303      	movs	r3, #3
 800529e:	e1e6      	b.n	800566e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <find_volume+0xca>
 80052a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80052b2:	230a      	movs	r3, #10
 80052b4:	e1db      	b.n	800566e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80052ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052be:	f7ff ff3f 	bl	8005140 <check_fs>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80052c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d149      	bne.n	8005364 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80052d0:	2300      	movs	r3, #0
 80052d2:	643b      	str	r3, [r7, #64]	; 0x40
 80052d4:	e01e      	b.n	8005314 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80052e4:	4413      	add	r3, r2
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	3304      	adds	r3, #4
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <find_volume+0x114>
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	3308      	adds	r3, #8
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fd72 	bl	8003de0 <ld_dword>
 80052fc:	4602      	mov	r2, r0
 80052fe:	e000      	b.n	8005302 <find_volume+0x116>
 8005300:	2200      	movs	r2, #0
 8005302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	3358      	adds	r3, #88	; 0x58
 8005308:	443b      	add	r3, r7
 800530a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800530e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005310:	3301      	adds	r3, #1
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	2b03      	cmp	r3, #3
 8005318:	d9dd      	bls.n	80052d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800531a:	2300      	movs	r3, #0
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800531e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <find_volume+0x13e>
 8005324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005326:	3b01      	subs	r3, #1
 8005328:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800532a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	3358      	adds	r3, #88	; 0x58
 8005330:	443b      	add	r3, r7
 8005332:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <find_volume+0x15e>
 800533e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005342:	f7ff fefd 	bl	8005140 <check_fs>
 8005346:	4603      	mov	r3, r0
 8005348:	e000      	b.n	800534c <find_volume+0x160>
 800534a:	2303      	movs	r3, #3
 800534c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005354:	2b01      	cmp	r3, #1
 8005356:	d905      	bls.n	8005364 <find_volume+0x178>
 8005358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535a:	3301      	adds	r3, #1
 800535c:	643b      	str	r3, [r7, #64]	; 0x40
 800535e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005360:	2b03      	cmp	r3, #3
 8005362:	d9e2      	bls.n	800532a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005368:	2b04      	cmp	r3, #4
 800536a:	d101      	bne.n	8005370 <find_volume+0x184>
 800536c:	2301      	movs	r3, #1
 800536e:	e17e      	b.n	800566e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005374:	2b01      	cmp	r3, #1
 8005376:	d901      	bls.n	800537c <find_volume+0x190>
 8005378:	230d      	movs	r3, #13
 800537a:	e178      	b.n	800566e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	3330      	adds	r3, #48	; 0x30
 8005380:	330b      	adds	r3, #11
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe fd14 	bl	8003db0 <ld_word>
 8005388:	4603      	mov	r3, r0
 800538a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538e:	d001      	beq.n	8005394 <find_volume+0x1a8>
 8005390:	230d      	movs	r3, #13
 8005392:	e16c      	b.n	800566e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	3330      	adds	r3, #48	; 0x30
 8005398:	3316      	adds	r3, #22
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fd08 	bl	8003db0 <ld_word>
 80053a0:	4603      	mov	r3, r0
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <find_volume+0x1cc>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	3330      	adds	r3, #48	; 0x30
 80053ae:	3324      	adds	r3, #36	; 0x24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe fd15 	bl	8003de0 <ld_dword>
 80053b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053bc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	789b      	ldrb	r3, [r3, #2]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d005      	beq.n	80053dc <find_volume+0x1f0>
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	789b      	ldrb	r3, [r3, #2]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d001      	beq.n	80053dc <find_volume+0x1f0>
 80053d8:	230d      	movs	r3, #13
 80053da:	e148      	b.n	800566e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	789b      	ldrb	r3, [r3, #2]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	fb02 f303 	mul.w	r3, r2, r3
 80053e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	895b      	ldrh	r3, [r3, #10]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <find_volume+0x224>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	895b      	ldrh	r3, [r3, #10]
 8005402:	461a      	mov	r2, r3
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	895b      	ldrh	r3, [r3, #10]
 8005408:	3b01      	subs	r3, #1
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <find_volume+0x228>
 8005410:	230d      	movs	r3, #13
 8005412:	e12c      	b.n	800566e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	3330      	adds	r3, #48	; 0x30
 8005418:	3311      	adds	r3, #17
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fcc8 	bl	8003db0 <ld_word>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	891b      	ldrh	r3, [r3, #8]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <find_volume+0x24e>
 8005436:	230d      	movs	r3, #13
 8005438:	e119      	b.n	800566e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	3330      	adds	r3, #48	; 0x30
 800543e:	3313      	adds	r3, #19
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe fcb5 	bl	8003db0 <ld_word>
 8005446:	4603      	mov	r3, r0
 8005448:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800544a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544c:	2b00      	cmp	r3, #0
 800544e:	d106      	bne.n	800545e <find_volume+0x272>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	3330      	adds	r3, #48	; 0x30
 8005454:	3320      	adds	r3, #32
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe fcc2 	bl	8003de0 <ld_dword>
 800545c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	330e      	adds	r3, #14
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fca3 	bl	8003db0 <ld_word>
 800546a:	4603      	mov	r3, r0
 800546c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800546e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <find_volume+0x28c>
 8005474:	230d      	movs	r3, #13
 8005476:	e0fa      	b.n	800566e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005478:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800547a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547c:	4413      	add	r3, r2
 800547e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005480:	8912      	ldrh	r2, [r2, #8]
 8005482:	0912      	lsrs	r2, r2, #4
 8005484:	b292      	uxth	r2, r2
 8005486:	4413      	add	r3, r2
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800548a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	429a      	cmp	r2, r3
 8005490:	d204      	bcs.n	800549c <find_volume+0x2b0>
 8005492:	230d      	movs	r3, #13
 8005494:	e0eb      	b.n	800566e <find_volume+0x482>
 8005496:	bf00      	nop
 8005498:	200007a4 	.word	0x200007a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800549c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a4:	8952      	ldrh	r2, [r2, #10]
 80054a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <find_volume+0x2ca>
 80054b2:	230d      	movs	r3, #13
 80054b4:	e0db      	b.n	800566e <find_volume+0x482>
		fmt = FS_FAT32;
 80054b6:	2303      	movs	r3, #3
 80054b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d802      	bhi.n	80054cc <find_volume+0x2e0>
 80054c6:	2302      	movs	r3, #2
 80054c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d802      	bhi.n	80054dc <find_volume+0x2f0>
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1c9a      	adds	r2, r3, #2
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054e8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80054ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80054ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ee:	441a      	add	r2, r3
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80054f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	441a      	add	r2, r3
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80054fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005502:	2b03      	cmp	r3, #3
 8005504:	d11e      	bne.n	8005544 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	3330      	adds	r3, #48	; 0x30
 800550a:	332a      	adds	r3, #42	; 0x2a
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fc4f 	bl	8003db0 <ld_word>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <find_volume+0x330>
 8005518:	230d      	movs	r3, #13
 800551a:	e0a8      	b.n	800566e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	891b      	ldrh	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <find_volume+0x33c>
 8005524:	230d      	movs	r3, #13
 8005526:	e0a2      	b.n	800566e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	3330      	adds	r3, #48	; 0x30
 800552c:	332c      	adds	r3, #44	; 0x2c
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fc56 	bl	8003de0 <ld_dword>
 8005534:	4602      	mov	r2, r0
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	647b      	str	r3, [r7, #68]	; 0x44
 8005542:	e01f      	b.n	8005584 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	891b      	ldrh	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <find_volume+0x364>
 800554c:	230d      	movs	r3, #13
 800554e:	e08e      	b.n	800566e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005556:	441a      	add	r2, r3
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800555c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005560:	2b02      	cmp	r3, #2
 8005562:	d103      	bne.n	800556c <find_volume+0x380>
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	e00a      	b.n	8005582 <find_volume+0x396>
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	4613      	mov	r3, r2
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4413      	add	r3, r2
 8005576:	085a      	lsrs	r2, r3, #1
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005582:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800558e:	0a5b      	lsrs	r3, r3, #9
 8005590:	429a      	cmp	r2, r3
 8005592:	d201      	bcs.n	8005598 <find_volume+0x3ac>
 8005594:	230d      	movs	r3, #13
 8005596:	e06a      	b.n	800566e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	f04f 32ff 	mov.w	r2, #4294967295
 800559e:	611a      	str	r2, [r3, #16]
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80055ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d149      	bne.n	800564a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	3330      	adds	r3, #48	; 0x30
 80055ba:	3330      	adds	r3, #48	; 0x30
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe fbf7 	bl	8003db0 <ld_word>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d140      	bne.n	800564a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80055c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ca:	3301      	adds	r3, #1
 80055cc:	4619      	mov	r1, r3
 80055ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055d0:	f7fe fe9e 	bl	8004310 <move_window>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d137      	bne.n	800564a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2200      	movs	r2, #0
 80055de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80055e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e2:	3330      	adds	r3, #48	; 0x30
 80055e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fbe1 	bl	8003db0 <ld_word>
 80055ee:	4603      	mov	r3, r0
 80055f0:	461a      	mov	r2, r3
 80055f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d127      	bne.n	800564a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	3330      	adds	r3, #48	; 0x30
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fbee 	bl	8003de0 <ld_dword>
 8005604:	4603      	mov	r3, r0
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <find_volume+0x48c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d11e      	bne.n	800564a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	3330      	adds	r3, #48	; 0x30
 8005610:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fbe3 	bl	8003de0 <ld_dword>
 800561a:	4603      	mov	r3, r0
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <find_volume+0x490>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d113      	bne.n	800564a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005624:	3330      	adds	r3, #48	; 0x30
 8005626:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fbd8 	bl	8003de0 <ld_dword>
 8005630:	4602      	mov	r2, r0
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	3330      	adds	r3, #48	; 0x30
 800563a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fbce 	bl	8003de0 <ld_dword>
 8005644:	4602      	mov	r2, r0
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005650:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005652:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <find_volume+0x494>)
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <find_volume+0x494>)
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <find_volume+0x494>)
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005666:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005668:	f7fe fdea 	bl	8004240 <clear_lock>
#endif
	return FR_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3758      	adds	r7, #88	; 0x58
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	41615252 	.word	0x41615252
 800567c:	61417272 	.word	0x61417272
 8005680:	200007a8 	.word	0x200007a8

08005684 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800568e:	2309      	movs	r3, #9
 8005690:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01c      	beq.n	80056d2 <validate+0x4e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d018      	beq.n	80056d2 <validate+0x4e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d013      	beq.n	80056d2 <validate+0x4e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	889a      	ldrh	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	88db      	ldrh	r3, [r3, #6]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d10c      	bne.n	80056d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	785b      	ldrb	r3, [r3, #1]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe fad8 	bl	8003c74 <disk_status>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <validate+0x4e>
			res = FR_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <validate+0x5a>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	e000      	b.n	80056e0 <validate+0x5c>
 80056de:	2300      	movs	r3, #0
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	6013      	str	r3, [r2, #0]
	return res;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005702:	f107 0310 	add.w	r3, r7, #16
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fcd5 	bl	80050b6 <get_ldnumber>
 800570c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	da01      	bge.n	8005718 <f_mount+0x28>
 8005714:	230b      	movs	r3, #11
 8005716:	e02b      	b.n	8005770 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <f_mount+0x88>)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005720:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005728:	69b8      	ldr	r0, [r7, #24]
 800572a:	f7fe fd89 	bl	8004240 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	490d      	ldr	r1, [pc, #52]	; (8005778 <f_mount+0x88>)
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <f_mount+0x66>
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <f_mount+0x6a>
 8005756:	2300      	movs	r3, #0
 8005758:	e00a      	b.n	8005770 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800575a:	f107 010c 	add.w	r1, r7, #12
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	2200      	movs	r2, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff fd41 	bl	80051ec <find_volume>
 800576a:	4603      	mov	r3, r0
 800576c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	200007a4 	.word	0x200007a4

0800577c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b098      	sub	sp, #96	; 0x60
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <f_open+0x18>
 8005790:	2309      	movs	r3, #9
 8005792:	e1ad      	b.n	8005af0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800579a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	f107 0110 	add.w	r1, r7, #16
 80057a2:	f107 0308 	add.w	r3, r7, #8
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fd20 	bl	80051ec <find_volume>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80057b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 8191 	bne.w	8005ade <f_open+0x362>
		dj.obj.fs = fs;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fc03 	bl	8004fd4 <follow_path>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80057d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11a      	bne.n	8005812 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80057dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057e0:	b25b      	sxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da03      	bge.n	80057ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80057e6:	2306      	movs	r3, #6
 80057e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80057ec:	e011      	b.n	8005812 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	4611      	mov	r1, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fbd2 	bl	8003fb0 <chk_lock>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	f003 031c 	and.w	r3, r3, #28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d07f      	beq.n	800591c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800581c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005820:	2b00      	cmp	r3, #0
 8005822:	d017      	beq.n	8005854 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005824:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005828:	2b04      	cmp	r3, #4
 800582a:	d10e      	bne.n	800584a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800582c:	f7fe fc1c 	bl	8004068 <enq_lock>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d006      	beq.n	8005844 <f_open+0xc8>
 8005836:	f107 0314 	add.w	r3, r7, #20
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fb03 	bl	8004e46 <dir_register>
 8005840:	4603      	mov	r3, r0
 8005842:	e000      	b.n	8005846 <f_open+0xca>
 8005844:	2312      	movs	r3, #18
 8005846:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	f043 0308 	orr.w	r3, r3, #8
 8005850:	71fb      	strb	r3, [r7, #7]
 8005852:	e010      	b.n	8005876 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005854:	7ebb      	ldrb	r3, [r7, #26]
 8005856:	f003 0311 	and.w	r3, r3, #17
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <f_open+0xea>
					res = FR_DENIED;
 800585e:	2307      	movs	r3, #7
 8005860:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005864:	e007      	b.n	8005876 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <f_open+0xfa>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800587a:	2b00      	cmp	r3, #0
 800587c:	d168      	bne.n	8005950 <f_open+0x1d4>
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d063      	beq.n	8005950 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005888:	f7fe f994 	bl	8003bb4 <get_fattime>
 800588c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	330e      	adds	r3, #14
 8005892:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005894:	4618      	mov	r0, r3
 8005896:	f7fe fae1 	bl	8003e5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800589a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589c:	3316      	adds	r3, #22
 800589e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fadb 	bl	8003e5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	330b      	adds	r3, #11
 80058aa:	2220      	movs	r2, #32
 80058ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b2:	4611      	mov	r1, r2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fa32 	bl	8004d1e <ld_clust>
 80058ba:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058c0:	2200      	movs	r2, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff fa4a 	bl	8004d5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80058c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ca:	331c      	adds	r3, #28
 80058cc:	2100      	movs	r1, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fac4 	bl	8003e5c <st_dword>
					fs->wflag = 1;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2201      	movs	r2, #1
 80058d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80058da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d037      	beq.n	8005950 <f_open+0x1d4>
						dw = fs->winsect;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	2200      	movs	r2, #0
 80058ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe ff5d 	bl	80047ae <remove_chain>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80058fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d126      	bne.n	8005950 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fd02 	bl	8004310 <move_window>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005916:	3a01      	subs	r2, #1
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	e019      	b.n	8005950 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800591c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005920:	2b00      	cmp	r3, #0
 8005922:	d115      	bne.n	8005950 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005924:	7ebb      	ldrb	r3, [r7, #26]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <f_open+0x1ba>
					res = FR_NO_FILE;
 800592e:	2304      	movs	r3, #4
 8005930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005934:	e00c      	b.n	8005950 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <f_open+0x1d4>
 8005940:	7ebb      	ldrb	r3, [r7, #26]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <f_open+0x1d4>
						res = FR_DENIED;
 800594a:	2307      	movs	r3, #7
 800594c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005950:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005954:	2b00      	cmp	r3, #0
 8005956:	d128      	bne.n	80059aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005968:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	f107 0314 	add.w	r3, r7, #20
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f7fe fb8b 	bl	80040ac <inc_lock>
 8005996:	4602      	mov	r2, r0
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <f_open+0x22e>
 80059a4:	2302      	movs	r3, #2
 80059a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80059aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 8095 	bne.w	8005ade <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059b8:	4611      	mov	r1, r2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f9af 	bl	8004d1e <ld_clust>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	331c      	adds	r3, #28
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fa08 	bl	8003de0 <ld_dword>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	88da      	ldrh	r2, [r3, #6]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	79fa      	ldrb	r2, [r7, #7]
 80059ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3330      	adds	r3, #48	; 0x30
 8005a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fe fa72 	bl	8003ef6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d060      	beq.n	8005ade <f_open+0x362>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	025b      	lsls	r3, r3, #9
 8005a32:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a40:	e016      	b.n	8005a70 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fd1d 	bl	8004486 <get_fat>
 8005a4c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d802      	bhi.n	8005a5a <f_open+0x2de>
 8005a54:	2302      	movs	r3, #2
 8005a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d102      	bne.n	8005a68 <f_open+0x2ec>
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d103      	bne.n	8005a80 <f_open+0x304>
 8005a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d8e0      	bhi.n	8005a42 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a84:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d127      	bne.n	8005ade <f_open+0x362>
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d022      	beq.n	8005ade <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fcd3 	bl	8004448 <clust2sect>
 8005aa2:	6478      	str	r0, [r7, #68]	; 0x44
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <f_open+0x336>
						res = FR_INT_ERR;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ab0:	e015      	b.n	8005ade <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab4:	0a5a      	lsrs	r2, r3, #9
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab8:	441a      	add	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	7858      	ldrb	r0, [r3, #1]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	2301      	movs	r3, #1
 8005ace:	f7fe f911 	bl	8003cf4 <disk_read>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <f_open+0x362>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005ade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <f_open+0x370>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005aec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3760      	adds	r7, #96	; 0x60
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f107 0214 	add.w	r2, r7, #20
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fdb3 	bl	8005684 <validate>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005b24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <f_read+0x44>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	7d5b      	ldrb	r3, [r3, #21]
 8005b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <f_read+0x4a>
 8005b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b40:	e115      	b.n	8005d6e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	7d1b      	ldrb	r3, [r3, #20]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <f_read+0x5a>
 8005b4e:	2307      	movs	r3, #7
 8005b50:	e10d      	b.n	8005d6e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	f240 80fe 	bls.w	8005d64 <f_read+0x26c>
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005b6c:	e0fa      	b.n	8005d64 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 80c6 	bne.w	8005d08 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	0a5b      	lsrs	r3, r3, #9
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	8952      	ldrh	r2, [r2, #10]
 8005b86:	3a01      	subs	r2, #1
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d12f      	bne.n	8005bf2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba0:	e013      	b.n	8005bca <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7fe fef9 	bl	80049a8 <clmt_clust>
 8005bb6:	6338      	str	r0, [r7, #48]	; 0x30
 8005bb8:	e007      	b.n	8005bca <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	f7fe fc5f 	bl	8004486 <get_fat>
 8005bc8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d804      	bhi.n	8005bda <f_read+0xe2>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	755a      	strb	r2, [r3, #21]
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0c9      	b.n	8005d6e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be0:	d104      	bne.n	8005bec <f_read+0xf4>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	755a      	strb	r2, [r3, #21]
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0c0      	b.n	8005d6e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe fc24 	bl	8004448 <clust2sect>
 8005c00:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <f_read+0x11a>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	755a      	strb	r2, [r3, #21]
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e0ad      	b.n	8005d6e <f_read+0x276>
			sect += csect;
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0a5b      	lsrs	r3, r3, #9
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d039      	beq.n	8005c9a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	4413      	add	r3, r2
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	8952      	ldrh	r2, [r2, #10]
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d905      	bls.n	8005c40 <f_read+0x148>
					cc = fs->csize - csect;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	895b      	ldrh	r3, [r3, #10]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	7858      	ldrb	r0, [r3, #1]
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4a:	f7fe f853 	bl	8003cf4 <disk_read>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <f_read+0x166>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	755a      	strb	r2, [r3, #21]
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e087      	b.n	8005d6e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	7d1b      	ldrb	r3, [r3, #20]
 8005c62:	b25b      	sxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da14      	bge.n	8005c92 <f_read+0x19a>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d90d      	bls.n	8005c92 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1a      	ldr	r2, [r3, #32]
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	025b      	lsls	r3, r3, #9
 8005c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c82:	18d0      	adds	r0, r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3330      	adds	r3, #48	; 0x30
 8005c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7fe f911 	bl	8003eb4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	025b      	lsls	r3, r3, #9
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005c98:	e050      	b.n	8005d3c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d02e      	beq.n	8005d02 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	7d1b      	ldrb	r3, [r3, #20]
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da18      	bge.n	8005ce0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	7858      	ldrb	r0, [r3, #1]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1a      	ldr	r2, [r3, #32]
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f7fe f839 	bl	8003d34 <disk_write>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d004      	beq.n	8005cd2 <f_read+0x1da>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	755a      	strb	r2, [r3, #21]
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e04d      	b.n	8005d6e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	7d1b      	ldrb	r3, [r3, #20]
 8005cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	7858      	ldrb	r0, [r3, #1]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005cea:	2301      	movs	r3, #1
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	f7fe f801 	bl	8003cf4 <disk_read>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <f_read+0x20a>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	755a      	strb	r2, [r3, #21]
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e035      	b.n	8005d6e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d901      	bls.n	8005d22 <f_read+0x22a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d30:	4413      	add	r3, r2
 8005d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d34:	4619      	mov	r1, r3
 8005d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d38:	f7fe f8bc 	bl	8003eb4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	4413      	add	r3, r2
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	699a      	ldr	r2, [r3, #24]
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	619a      	str	r2, [r3, #24]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	441a      	add	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f47f af01 	bne.w	8005b6e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3738      	adds	r7, #56	; 0x38
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b08c      	sub	sp, #48	; 0x30
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f107 0210 	add.w	r2, r7, #16
 8005d94:	4611      	mov	r1, r2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fc74 	bl	8005684 <validate>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d107      	bne.n	8005dba <f_write+0x44>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	7d5b      	ldrb	r3, [r3, #21]
 8005dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <f_write+0x4a>
 8005dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dbe:	e14b      	b.n	8006058 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	7d1b      	ldrb	r3, [r3, #20]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <f_write+0x5a>
 8005dcc:	2307      	movs	r3, #7
 8005dce:	e143      	b.n	8006058 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	441a      	add	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	f080 812d 	bcs.w	800603c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005dea:	e127      	b.n	800603c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 80e3 	bne.w	8005fc0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	0a5b      	lsrs	r3, r3, #9
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	8952      	ldrh	r2, [r2, #10]
 8005e04:	3a01      	subs	r2, #1
 8005e06:	4013      	ands	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d143      	bne.n	8005e98 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10c      	bne.n	8005e32 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11a      	bne.n	8005e5a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2100      	movs	r1, #0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fe fd25 	bl	8004878 <create_chain>
 8005e2e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e30:	e013      	b.n	8005e5a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7fe fdb1 	bl	80049a8 <clmt_clust>
 8005e46:	62b8      	str	r0, [r7, #40]	; 0x28
 8005e48:	e007      	b.n	8005e5a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fd10 	bl	8004878 <create_chain>
 8005e58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80f2 	beq.w	8006046 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d104      	bne.n	8005e72 <f_write+0xfc>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	755a      	strb	r2, [r3, #21]
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0f2      	b.n	8006058 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d104      	bne.n	8005e84 <f_write+0x10e>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	755a      	strb	r2, [r3, #21]
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0e9      	b.n	8006058 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e88:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <f_write+0x122>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e96:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	7d1b      	ldrb	r3, [r3, #20]
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da18      	bge.n	8005ed4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	7858      	ldrb	r0, [r3, #1]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f7fd ff3f 	bl	8003d34 <disk_write>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <f_write+0x150>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	755a      	strb	r2, [r3, #21]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0c8      	b.n	8006058 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	7d1b      	ldrb	r3, [r3, #20]
 8005eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4619      	mov	r1, r3
 8005edc:	4610      	mov	r0, r2
 8005ede:	f7fe fab3 	bl	8004448 <clust2sect>
 8005ee2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d104      	bne.n	8005ef4 <f_write+0x17e>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2202      	movs	r2, #2
 8005eee:	755a      	strb	r2, [r3, #21]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e0b1      	b.n	8006058 <f_write+0x2e2>
			sect += csect;
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	4413      	add	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0a5b      	lsrs	r3, r3, #9
 8005f00:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d03c      	beq.n	8005f82 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	8952      	ldrh	r2, [r2, #10]
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d905      	bls.n	8005f22 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	895b      	ldrh	r3, [r3, #10]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	7858      	ldrb	r0, [r3, #1]
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	69f9      	ldr	r1, [r7, #28]
 8005f2c:	f7fd ff02 	bl	8003d34 <disk_write>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d004      	beq.n	8005f40 <f_write+0x1ca>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	755a      	strb	r2, [r3, #21]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e08b      	b.n	8006058 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a1a      	ldr	r2, [r3, #32]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	6a3a      	ldr	r2, [r7, #32]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d915      	bls.n	8005f7a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1a      	ldr	r2, [r3, #32]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	025b      	lsls	r3, r3, #9
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f66:	4619      	mov	r1, r3
 8005f68:	f7fd ffa4 	bl	8003eb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	7d1b      	ldrb	r3, [r3, #20]
 8005f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	025b      	lsls	r3, r3, #9
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005f80:	e03f      	b.n	8006002 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d016      	beq.n	8005fba <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	699a      	ldr	r2, [r3, #24]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d210      	bcs.n	8005fba <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	7858      	ldrb	r0, [r3, #1]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	f7fd fea5 	bl	8003cf4 <disk_read>
 8005faa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	755a      	strb	r2, [r3, #21]
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e04e      	b.n	8006058 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d901      	bls.n	8005fda <f_write+0x264>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe8:	4413      	add	r3, r2
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	69f9      	ldr	r1, [r7, #28]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd ff60 	bl	8003eb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	7d1b      	ldrb	r3, [r3, #20]
 8005ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	4413      	add	r3, r2
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	619a      	str	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	429a      	cmp	r2, r3
 8006020:	bf38      	it	cc
 8006022:	461a      	movcc	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	60da      	str	r2, [r3, #12]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	441a      	add	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f47f aed4 	bne.w	8005dec <f_write+0x76>
 8006044:	e000      	b.n	8006048 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006046:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	7d1b      	ldrb	r3, [r3, #20]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3730      	adds	r7, #48	; 0x30
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f107 0208 	add.w	r2, r7, #8
 800606e:	4611      	mov	r1, r2
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff fb07 	bl	8005684 <validate>
 8006076:	4603      	mov	r3, r0
 8006078:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800607a:	7dfb      	ldrb	r3, [r7, #23]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d168      	bne.n	8006152 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	7d1b      	ldrb	r3, [r3, #20]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d062      	beq.n	8006152 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7d1b      	ldrb	r3, [r3, #20]
 8006090:	b25b      	sxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	da15      	bge.n	80060c2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	7858      	ldrb	r0, [r3, #1]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	2301      	movs	r3, #1
 80060a6:	f7fd fe45 	bl	8003d34 <disk_write>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <f_sync+0x54>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e04f      	b.n	8006154 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	7d1b      	ldrb	r3, [r3, #20]
 80060b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80060c2:	f7fd fd77 	bl	8003bb4 <get_fattime>
 80060c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	4619      	mov	r1, r3
 80060d0:	4610      	mov	r0, r2
 80060d2:	f7fe f91d 	bl	8004310 <move_window>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d138      	bne.n	8006152 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	330b      	adds	r3, #11
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	330b      	adds	r3, #11
 80060f0:	f042 0220 	orr.w	r2, r2, #32
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	461a      	mov	r2, r3
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	f7fe fe2a 	bl	8004d5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f103 021c 	add.w	r2, r3, #28
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f7fd fea1 	bl	8003e5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3316      	adds	r3, #22
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fd fe9b 	bl	8003e5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3312      	adds	r3, #18
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f7fd fe7a 	bl	8003e26 <st_word>
					fs->wflag = 1;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2201      	movs	r2, #1
 8006136:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe f916 	bl	800436c <sync_fs>
 8006140:	4603      	mov	r3, r0
 8006142:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7d1b      	ldrb	r3, [r3, #20]
 8006148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614c:	b2da      	uxtb	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff7b 	bl	8006060 <f_sync>
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d118      	bne.n	80061a6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f107 0208 	add.w	r2, r7, #8
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fa81 	bl	8005684 <validate>
 8006182:	4603      	mov	r3, r0
 8006184:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10c      	bne.n	80061a6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe f819 	bl	80041c8 <dec_lock>
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b092      	sub	sp, #72	; 0x48
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80061bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	2200      	movs	r2, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f810 	bl	80051ec <find_volume>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80061d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 8099 	bne.w	800630e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80061dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	3b02      	subs	r3, #2
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d804      	bhi.n	80061fa <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e089      	b.n	800630e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d128      	bne.n	8006258 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006206:	2302      	movs	r3, #2
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800620e:	f107 0314 	add.w	r3, r7, #20
 8006212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe f936 	bl	8004486 <get_fat>
 800621a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d103      	bne.n	800622c <f_getfree+0x7c>
 8006224:	2301      	movs	r3, #1
 8006226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800622a:	e063      	b.n	80062f4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d103      	bne.n	800623a <f_getfree+0x8a>
 8006232:	2302      	movs	r3, #2
 8006234:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006238:	e05c      	b.n	80062f4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <f_getfree+0x96>
 8006240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006242:	3301      	adds	r3, #1
 8006244:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006248:	3301      	adds	r3, #1
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006252:	429a      	cmp	r2, r3
 8006254:	d3db      	bcc.n	800620e <f_getfree+0x5e>
 8006256:	e04d      	b.n	80062f4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
 8006268:	2300      	movs	r3, #0
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	2b00      	cmp	r3, #0
 8006270:	d113      	bne.n	800629a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	63ba      	str	r2, [r7, #56]	; 0x38
 800627a:	4619      	mov	r1, r3
 800627c:	f7fe f848 	bl	8004310 <move_window>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006286:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800628a:	2b00      	cmp	r3, #0
 800628c:	d131      	bne.n	80062f2 <f_getfree+0x142>
							p = fs->win;
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	3330      	adds	r3, #48	; 0x30
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d10f      	bne.n	80062c2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80062a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a4:	f7fd fd84 	bl	8003db0 <ld_word>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <f_getfree+0x104>
 80062ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b0:	3301      	adds	r3, #1
 80062b2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	3302      	adds	r3, #2
 80062b8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	3b02      	subs	r3, #2
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	e010      	b.n	80062e4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80062c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c4:	f7fd fd8c 	bl	8003de0 <ld_dword>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <f_getfree+0x128>
 80062d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d4:	3301      	adds	r3, #1
 80062d6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	3304      	adds	r3, #4
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	3b04      	subs	r3, #4
 80062e2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80062e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e6:	3b01      	subs	r3, #1
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1bd      	bne.n	800626c <f_getfree+0xbc>
 80062f0:	e000      	b.n	80062f4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80062f2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062fe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	791a      	ldrb	r2, [r3, #4]
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800630e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006312:	4618      	mov	r0, r3
 8006314:	3748      	adds	r7, #72	; 0x48
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b088      	sub	sp, #32
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800632e:	e01b      	b.n	8006368 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006330:	f107 0310 	add.w	r3, r7, #16
 8006334:	f107 0114 	add.w	r1, r7, #20
 8006338:	2201      	movs	r2, #1
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fbdc 	bl	8005af8 <f_read>
		if (rc != 1) break;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d116      	bne.n	8006374 <f_gets+0x5a>
		c = s[0];
 8006346:	7d3b      	ldrb	r3, [r7, #20]
 8006348:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	2b0d      	cmp	r3, #13
 800634e:	d100      	bne.n	8006352 <f_gets+0x38>
 8006350:	e00a      	b.n	8006368 <f_gets+0x4e>
		*p++ = c;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	61ba      	str	r2, [r7, #24]
 8006358:	7dfa      	ldrb	r2, [r7, #23]
 800635a:	701a      	strb	r2, [r3, #0]
		n++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006362:	7dfb      	ldrb	r3, [r7, #23]
 8006364:	2b0a      	cmp	r3, #10
 8006366:	d007      	beq.n	8006378 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	3b01      	subs	r3, #1
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	429a      	cmp	r2, r3
 8006370:	dbde      	blt.n	8006330 <f_gets+0x16>
 8006372:	e002      	b.n	800637a <f_gets+0x60>
		if (rc != 1) break;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006378:	bf00      	nop
	}
	*p = 0;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <f_gets+0x70>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	e000      	b.n	800638c <f_gets+0x72>
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80063aa:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063ac:	7a5b      	ldrb	r3, [r3, #9]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d131      	bne.n	8006418 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80063b4:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063b6:	7a5b      	ldrb	r3, [r3, #9]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063be:	2100      	movs	r1, #0
 80063c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80063c2:	4b19      	ldr	r3, [pc, #100]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063c4:	7a5b      	ldrb	r3, [r3, #9]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	4a17      	ldr	r2, [pc, #92]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063d4:	7a5b      	ldrb	r3, [r3, #9]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063dc:	4413      	add	r3, r2
 80063de:	79fa      	ldrb	r2, [r7, #7]
 80063e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063e4:	7a5b      	ldrb	r3, [r3, #9]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	b2d1      	uxtb	r1, r2
 80063ec:	4a0e      	ldr	r2, [pc, #56]	; (8006428 <FATFS_LinkDriverEx+0x94>)
 80063ee:	7251      	strb	r1, [r2, #9]
 80063f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	3330      	adds	r3, #48	; 0x30
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	3301      	adds	r3, #1
 8006400:	223a      	movs	r2, #58	; 0x3a
 8006402:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	3302      	adds	r3, #2
 8006408:	222f      	movs	r2, #47	; 0x2f
 800640a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3303      	adds	r3, #3
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
}
 800641a:	4618      	mov	r0, r3
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	200007cc 	.word	0x200007cc

0800642c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006436:	2200      	movs	r2, #0
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff ffaa 	bl	8006394 <FATFS_LinkDriverEx>
 8006440:	4603      	mov	r3, r0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <__errno>:
 800644c:	4b01      	ldr	r3, [pc, #4]	; (8006454 <__errno+0x8>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000020 	.word	0x20000020

08006458 <__libc_init_array>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4d0d      	ldr	r5, [pc, #52]	; (8006490 <__libc_init_array+0x38>)
 800645c:	4c0d      	ldr	r4, [pc, #52]	; (8006494 <__libc_init_array+0x3c>)
 800645e:	1b64      	subs	r4, r4, r5
 8006460:	10a4      	asrs	r4, r4, #2
 8006462:	2600      	movs	r6, #0
 8006464:	42a6      	cmp	r6, r4
 8006466:	d109      	bne.n	800647c <__libc_init_array+0x24>
 8006468:	4d0b      	ldr	r5, [pc, #44]	; (8006498 <__libc_init_array+0x40>)
 800646a:	4c0c      	ldr	r4, [pc, #48]	; (800649c <__libc_init_array+0x44>)
 800646c:	f000 fca8 	bl	8006dc0 <_init>
 8006470:	1b64      	subs	r4, r4, r5
 8006472:	10a4      	asrs	r4, r4, #2
 8006474:	2600      	movs	r6, #0
 8006476:	42a6      	cmp	r6, r4
 8006478:	d105      	bne.n	8006486 <__libc_init_array+0x2e>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006480:	4798      	blx	r3
 8006482:	3601      	adds	r6, #1
 8006484:	e7ee      	b.n	8006464 <__libc_init_array+0xc>
 8006486:	f855 3b04 	ldr.w	r3, [r5], #4
 800648a:	4798      	blx	r3
 800648c:	3601      	adds	r6, #1
 800648e:	e7f2      	b.n	8006476 <__libc_init_array+0x1e>
 8006490:	080070a8 	.word	0x080070a8
 8006494:	080070a8 	.word	0x080070a8
 8006498:	080070a8 	.word	0x080070a8
 800649c:	080070ac 	.word	0x080070ac

080064a0 <memset>:
 80064a0:	4402      	add	r2, r0
 80064a2:	4603      	mov	r3, r0
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <memset+0xa>
 80064a8:	4770      	bx	lr
 80064aa:	f803 1b01 	strb.w	r1, [r3], #1
 80064ae:	e7f9      	b.n	80064a4 <memset+0x4>

080064b0 <_vsniprintf_r>:
 80064b0:	b530      	push	{r4, r5, lr}
 80064b2:	4614      	mov	r4, r2
 80064b4:	2c00      	cmp	r4, #0
 80064b6:	b09b      	sub	sp, #108	; 0x6c
 80064b8:	4605      	mov	r5, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	da05      	bge.n	80064ca <_vsniprintf_r+0x1a>
 80064be:	238b      	movs	r3, #139	; 0x8b
 80064c0:	6003      	str	r3, [r0, #0]
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295
 80064c6:	b01b      	add	sp, #108	; 0x6c
 80064c8:	bd30      	pop	{r4, r5, pc}
 80064ca:	f44f 7302 	mov.w	r3, #520	; 0x208
 80064ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80064d2:	bf14      	ite	ne
 80064d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064d8:	4623      	moveq	r3, r4
 80064da:	9302      	str	r3, [sp, #8]
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064e2:	9100      	str	r1, [sp, #0]
 80064e4:	9104      	str	r1, [sp, #16]
 80064e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80064ea:	4669      	mov	r1, sp
 80064ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ee:	f000 f875 	bl	80065dc <_svfiprintf_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	bfbc      	itt	lt
 80064f6:	238b      	movlt	r3, #139	; 0x8b
 80064f8:	602b      	strlt	r3, [r5, #0]
 80064fa:	2c00      	cmp	r4, #0
 80064fc:	d0e3      	beq.n	80064c6 <_vsniprintf_r+0x16>
 80064fe:	9b00      	ldr	r3, [sp, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e7df      	b.n	80064c6 <_vsniprintf_r+0x16>
	...

08006508 <vsniprintf>:
 8006508:	b507      	push	{r0, r1, r2, lr}
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	460a      	mov	r2, r1
 8006510:	4601      	mov	r1, r0
 8006512:	4803      	ldr	r0, [pc, #12]	; (8006520 <vsniprintf+0x18>)
 8006514:	6800      	ldr	r0, [r0, #0]
 8006516:	f7ff ffcb 	bl	80064b0 <_vsniprintf_r>
 800651a:	b003      	add	sp, #12
 800651c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006520:	20000020 	.word	0x20000020

08006524 <__ssputs_r>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	688e      	ldr	r6, [r1, #8]
 800652a:	429e      	cmp	r6, r3
 800652c:	4682      	mov	sl, r0
 800652e:	460c      	mov	r4, r1
 8006530:	4690      	mov	r8, r2
 8006532:	461f      	mov	r7, r3
 8006534:	d838      	bhi.n	80065a8 <__ssputs_r+0x84>
 8006536:	898a      	ldrh	r2, [r1, #12]
 8006538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800653c:	d032      	beq.n	80065a4 <__ssputs_r+0x80>
 800653e:	6825      	ldr	r5, [r4, #0]
 8006540:	6909      	ldr	r1, [r1, #16]
 8006542:	eba5 0901 	sub.w	r9, r5, r1
 8006546:	6965      	ldr	r5, [r4, #20]
 8006548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800654c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006550:	3301      	adds	r3, #1
 8006552:	444b      	add	r3, r9
 8006554:	106d      	asrs	r5, r5, #1
 8006556:	429d      	cmp	r5, r3
 8006558:	bf38      	it	cc
 800655a:	461d      	movcc	r5, r3
 800655c:	0553      	lsls	r3, r2, #21
 800655e:	d531      	bpl.n	80065c4 <__ssputs_r+0xa0>
 8006560:	4629      	mov	r1, r5
 8006562:	f000 fb63 	bl	8006c2c <_malloc_r>
 8006566:	4606      	mov	r6, r0
 8006568:	b950      	cbnz	r0, 8006580 <__ssputs_r+0x5c>
 800656a:	230c      	movs	r3, #12
 800656c:	f8ca 3000 	str.w	r3, [sl]
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006580:	6921      	ldr	r1, [r4, #16]
 8006582:	464a      	mov	r2, r9
 8006584:	f000 fabe 	bl	8006b04 <memcpy>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800658e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	6126      	str	r6, [r4, #16]
 8006596:	6165      	str	r5, [r4, #20]
 8006598:	444e      	add	r6, r9
 800659a:	eba5 0509 	sub.w	r5, r5, r9
 800659e:	6026      	str	r6, [r4, #0]
 80065a0:	60a5      	str	r5, [r4, #8]
 80065a2:	463e      	mov	r6, r7
 80065a4:	42be      	cmp	r6, r7
 80065a6:	d900      	bls.n	80065aa <__ssputs_r+0x86>
 80065a8:	463e      	mov	r6, r7
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	4632      	mov	r2, r6
 80065ae:	4641      	mov	r1, r8
 80065b0:	f000 fab6 	bl	8006b20 <memmove>
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	1b9b      	subs	r3, r3, r6
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	4433      	add	r3, r6
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	2000      	movs	r0, #0
 80065c2:	e7db      	b.n	800657c <__ssputs_r+0x58>
 80065c4:	462a      	mov	r2, r5
 80065c6:	f000 fba5 	bl	8006d14 <_realloc_r>
 80065ca:	4606      	mov	r6, r0
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d1e1      	bne.n	8006594 <__ssputs_r+0x70>
 80065d0:	6921      	ldr	r1, [r4, #16]
 80065d2:	4650      	mov	r0, sl
 80065d4:	f000 fabe 	bl	8006b54 <_free_r>
 80065d8:	e7c7      	b.n	800656a <__ssputs_r+0x46>
	...

080065dc <_svfiprintf_r>:
 80065dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e0:	4698      	mov	r8, r3
 80065e2:	898b      	ldrh	r3, [r1, #12]
 80065e4:	061b      	lsls	r3, r3, #24
 80065e6:	b09d      	sub	sp, #116	; 0x74
 80065e8:	4607      	mov	r7, r0
 80065ea:	460d      	mov	r5, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	d50e      	bpl.n	800660e <_svfiprintf_r+0x32>
 80065f0:	690b      	ldr	r3, [r1, #16]
 80065f2:	b963      	cbnz	r3, 800660e <_svfiprintf_r+0x32>
 80065f4:	2140      	movs	r1, #64	; 0x40
 80065f6:	f000 fb19 	bl	8006c2c <_malloc_r>
 80065fa:	6028      	str	r0, [r5, #0]
 80065fc:	6128      	str	r0, [r5, #16]
 80065fe:	b920      	cbnz	r0, 800660a <_svfiprintf_r+0x2e>
 8006600:	230c      	movs	r3, #12
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	e0d1      	b.n	80067ae <_svfiprintf_r+0x1d2>
 800660a:	2340      	movs	r3, #64	; 0x40
 800660c:	616b      	str	r3, [r5, #20]
 800660e:	2300      	movs	r3, #0
 8006610:	9309      	str	r3, [sp, #36]	; 0x24
 8006612:	2320      	movs	r3, #32
 8006614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006618:	f8cd 800c 	str.w	r8, [sp, #12]
 800661c:	2330      	movs	r3, #48	; 0x30
 800661e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067c8 <_svfiprintf_r+0x1ec>
 8006622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006626:	f04f 0901 	mov.w	r9, #1
 800662a:	4623      	mov	r3, r4
 800662c:	469a      	mov	sl, r3
 800662e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006632:	b10a      	cbz	r2, 8006638 <_svfiprintf_r+0x5c>
 8006634:	2a25      	cmp	r2, #37	; 0x25
 8006636:	d1f9      	bne.n	800662c <_svfiprintf_r+0x50>
 8006638:	ebba 0b04 	subs.w	fp, sl, r4
 800663c:	d00b      	beq.n	8006656 <_svfiprintf_r+0x7a>
 800663e:	465b      	mov	r3, fp
 8006640:	4622      	mov	r2, r4
 8006642:	4629      	mov	r1, r5
 8006644:	4638      	mov	r0, r7
 8006646:	f7ff ff6d 	bl	8006524 <__ssputs_r>
 800664a:	3001      	adds	r0, #1
 800664c:	f000 80aa 	beq.w	80067a4 <_svfiprintf_r+0x1c8>
 8006650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006652:	445a      	add	r2, fp
 8006654:	9209      	str	r2, [sp, #36]	; 0x24
 8006656:	f89a 3000 	ldrb.w	r3, [sl]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 80a2 	beq.w	80067a4 <_svfiprintf_r+0x1c8>
 8006660:	2300      	movs	r3, #0
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800666a:	f10a 0a01 	add.w	sl, sl, #1
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	9307      	str	r3, [sp, #28]
 8006672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006676:	931a      	str	r3, [sp, #104]	; 0x68
 8006678:	4654      	mov	r4, sl
 800667a:	2205      	movs	r2, #5
 800667c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006680:	4851      	ldr	r0, [pc, #324]	; (80067c8 <_svfiprintf_r+0x1ec>)
 8006682:	f7f9 fdcd 	bl	8000220 <memchr>
 8006686:	9a04      	ldr	r2, [sp, #16]
 8006688:	b9d8      	cbnz	r0, 80066c2 <_svfiprintf_r+0xe6>
 800668a:	06d0      	lsls	r0, r2, #27
 800668c:	bf44      	itt	mi
 800668e:	2320      	movmi	r3, #32
 8006690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006694:	0711      	lsls	r1, r2, #28
 8006696:	bf44      	itt	mi
 8006698:	232b      	movmi	r3, #43	; 0x2b
 800669a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669e:	f89a 3000 	ldrb.w	r3, [sl]
 80066a2:	2b2a      	cmp	r3, #42	; 0x2a
 80066a4:	d015      	beq.n	80066d2 <_svfiprintf_r+0xf6>
 80066a6:	9a07      	ldr	r2, [sp, #28]
 80066a8:	4654      	mov	r4, sl
 80066aa:	2000      	movs	r0, #0
 80066ac:	f04f 0c0a 	mov.w	ip, #10
 80066b0:	4621      	mov	r1, r4
 80066b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b6:	3b30      	subs	r3, #48	; 0x30
 80066b8:	2b09      	cmp	r3, #9
 80066ba:	d94e      	bls.n	800675a <_svfiprintf_r+0x17e>
 80066bc:	b1b0      	cbz	r0, 80066ec <_svfiprintf_r+0x110>
 80066be:	9207      	str	r2, [sp, #28]
 80066c0:	e014      	b.n	80066ec <_svfiprintf_r+0x110>
 80066c2:	eba0 0308 	sub.w	r3, r0, r8
 80066c6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ca:	4313      	orrs	r3, r2
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	46a2      	mov	sl, r4
 80066d0:	e7d2      	b.n	8006678 <_svfiprintf_r+0x9c>
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	1d19      	adds	r1, r3, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	9103      	str	r1, [sp, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	bfbb      	ittet	lt
 80066de:	425b      	neglt	r3, r3
 80066e0:	f042 0202 	orrlt.w	r2, r2, #2
 80066e4:	9307      	strge	r3, [sp, #28]
 80066e6:	9307      	strlt	r3, [sp, #28]
 80066e8:	bfb8      	it	lt
 80066ea:	9204      	strlt	r2, [sp, #16]
 80066ec:	7823      	ldrb	r3, [r4, #0]
 80066ee:	2b2e      	cmp	r3, #46	; 0x2e
 80066f0:	d10c      	bne.n	800670c <_svfiprintf_r+0x130>
 80066f2:	7863      	ldrb	r3, [r4, #1]
 80066f4:	2b2a      	cmp	r3, #42	; 0x2a
 80066f6:	d135      	bne.n	8006764 <_svfiprintf_r+0x188>
 80066f8:	9b03      	ldr	r3, [sp, #12]
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	9203      	str	r2, [sp, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	bfb8      	it	lt
 8006704:	f04f 33ff 	movlt.w	r3, #4294967295
 8006708:	3402      	adds	r4, #2
 800670a:	9305      	str	r3, [sp, #20]
 800670c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067d8 <_svfiprintf_r+0x1fc>
 8006710:	7821      	ldrb	r1, [r4, #0]
 8006712:	2203      	movs	r2, #3
 8006714:	4650      	mov	r0, sl
 8006716:	f7f9 fd83 	bl	8000220 <memchr>
 800671a:	b140      	cbz	r0, 800672e <_svfiprintf_r+0x152>
 800671c:	2340      	movs	r3, #64	; 0x40
 800671e:	eba0 000a 	sub.w	r0, r0, sl
 8006722:	fa03 f000 	lsl.w	r0, r3, r0
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	4303      	orrs	r3, r0
 800672a:	3401      	adds	r4, #1
 800672c:	9304      	str	r3, [sp, #16]
 800672e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006732:	4826      	ldr	r0, [pc, #152]	; (80067cc <_svfiprintf_r+0x1f0>)
 8006734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006738:	2206      	movs	r2, #6
 800673a:	f7f9 fd71 	bl	8000220 <memchr>
 800673e:	2800      	cmp	r0, #0
 8006740:	d038      	beq.n	80067b4 <_svfiprintf_r+0x1d8>
 8006742:	4b23      	ldr	r3, [pc, #140]	; (80067d0 <_svfiprintf_r+0x1f4>)
 8006744:	bb1b      	cbnz	r3, 800678e <_svfiprintf_r+0x1b2>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	3307      	adds	r3, #7
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	3308      	adds	r3, #8
 8006750:	9303      	str	r3, [sp, #12]
 8006752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006754:	4433      	add	r3, r6
 8006756:	9309      	str	r3, [sp, #36]	; 0x24
 8006758:	e767      	b.n	800662a <_svfiprintf_r+0x4e>
 800675a:	fb0c 3202 	mla	r2, ip, r2, r3
 800675e:	460c      	mov	r4, r1
 8006760:	2001      	movs	r0, #1
 8006762:	e7a5      	b.n	80066b0 <_svfiprintf_r+0xd4>
 8006764:	2300      	movs	r3, #0
 8006766:	3401      	adds	r4, #1
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	4619      	mov	r1, r3
 800676c:	f04f 0c0a 	mov.w	ip, #10
 8006770:	4620      	mov	r0, r4
 8006772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006776:	3a30      	subs	r2, #48	; 0x30
 8006778:	2a09      	cmp	r2, #9
 800677a:	d903      	bls.n	8006784 <_svfiprintf_r+0x1a8>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0c5      	beq.n	800670c <_svfiprintf_r+0x130>
 8006780:	9105      	str	r1, [sp, #20]
 8006782:	e7c3      	b.n	800670c <_svfiprintf_r+0x130>
 8006784:	fb0c 2101 	mla	r1, ip, r1, r2
 8006788:	4604      	mov	r4, r0
 800678a:	2301      	movs	r3, #1
 800678c:	e7f0      	b.n	8006770 <_svfiprintf_r+0x194>
 800678e:	ab03      	add	r3, sp, #12
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	462a      	mov	r2, r5
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <_svfiprintf_r+0x1f8>)
 8006796:	a904      	add	r1, sp, #16
 8006798:	4638      	mov	r0, r7
 800679a:	f3af 8000 	nop.w
 800679e:	1c42      	adds	r2, r0, #1
 80067a0:	4606      	mov	r6, r0
 80067a2:	d1d6      	bne.n	8006752 <_svfiprintf_r+0x176>
 80067a4:	89ab      	ldrh	r3, [r5, #12]
 80067a6:	065b      	lsls	r3, r3, #25
 80067a8:	f53f af2c 	bmi.w	8006604 <_svfiprintf_r+0x28>
 80067ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ae:	b01d      	add	sp, #116	; 0x74
 80067b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b4:	ab03      	add	r3, sp, #12
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	462a      	mov	r2, r5
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <_svfiprintf_r+0x1f8>)
 80067bc:	a904      	add	r1, sp, #16
 80067be:	4638      	mov	r0, r7
 80067c0:	f000 f87a 	bl	80068b8 <_printf_i>
 80067c4:	e7eb      	b.n	800679e <_svfiprintf_r+0x1c2>
 80067c6:	bf00      	nop
 80067c8:	0800706c 	.word	0x0800706c
 80067cc:	08007076 	.word	0x08007076
 80067d0:	00000000 	.word	0x00000000
 80067d4:	08006525 	.word	0x08006525
 80067d8:	08007072 	.word	0x08007072

080067dc <_printf_common>:
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	4616      	mov	r6, r2
 80067e2:	4699      	mov	r9, r3
 80067e4:	688a      	ldr	r2, [r1, #8]
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067ec:	4293      	cmp	r3, r2
 80067ee:	bfb8      	it	lt
 80067f0:	4613      	movlt	r3, r2
 80067f2:	6033      	str	r3, [r6, #0]
 80067f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f8:	4607      	mov	r7, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	b10a      	cbz	r2, 8006802 <_printf_common+0x26>
 80067fe:	3301      	adds	r3, #1
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	0699      	lsls	r1, r3, #26
 8006806:	bf42      	ittt	mi
 8006808:	6833      	ldrmi	r3, [r6, #0]
 800680a:	3302      	addmi	r3, #2
 800680c:	6033      	strmi	r3, [r6, #0]
 800680e:	6825      	ldr	r5, [r4, #0]
 8006810:	f015 0506 	ands.w	r5, r5, #6
 8006814:	d106      	bne.n	8006824 <_printf_common+0x48>
 8006816:	f104 0a19 	add.w	sl, r4, #25
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	6832      	ldr	r2, [r6, #0]
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	42ab      	cmp	r3, r5
 8006822:	dc26      	bgt.n	8006872 <_printf_common+0x96>
 8006824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006828:	1e13      	subs	r3, r2, #0
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	2301      	movne	r3, #1
 8006830:	0692      	lsls	r2, r2, #26
 8006832:	d42b      	bmi.n	800688c <_printf_common+0xb0>
 8006834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006838:	4649      	mov	r1, r9
 800683a:	4638      	mov	r0, r7
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d01e      	beq.n	8006880 <_printf_common+0xa4>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	68e5      	ldr	r5, [r4, #12]
 8006846:	6832      	ldr	r2, [r6, #0]
 8006848:	f003 0306 	and.w	r3, r3, #6
 800684c:	2b04      	cmp	r3, #4
 800684e:	bf08      	it	eq
 8006850:	1aad      	subeq	r5, r5, r2
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	6922      	ldr	r2, [r4, #16]
 8006856:	bf0c      	ite	eq
 8006858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800685c:	2500      	movne	r5, #0
 800685e:	4293      	cmp	r3, r2
 8006860:	bfc4      	itt	gt
 8006862:	1a9b      	subgt	r3, r3, r2
 8006864:	18ed      	addgt	r5, r5, r3
 8006866:	2600      	movs	r6, #0
 8006868:	341a      	adds	r4, #26
 800686a:	42b5      	cmp	r5, r6
 800686c:	d11a      	bne.n	80068a4 <_printf_common+0xc8>
 800686e:	2000      	movs	r0, #0
 8006870:	e008      	b.n	8006884 <_printf_common+0xa8>
 8006872:	2301      	movs	r3, #1
 8006874:	4652      	mov	r2, sl
 8006876:	4649      	mov	r1, r9
 8006878:	4638      	mov	r0, r7
 800687a:	47c0      	blx	r8
 800687c:	3001      	adds	r0, #1
 800687e:	d103      	bne.n	8006888 <_printf_common+0xac>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006888:	3501      	adds	r5, #1
 800688a:	e7c6      	b.n	800681a <_printf_common+0x3e>
 800688c:	18e1      	adds	r1, r4, r3
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	2030      	movs	r0, #48	; 0x30
 8006892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006896:	4422      	add	r2, r4
 8006898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800689c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a0:	3302      	adds	r3, #2
 80068a2:	e7c7      	b.n	8006834 <_printf_common+0x58>
 80068a4:	2301      	movs	r3, #1
 80068a6:	4622      	mov	r2, r4
 80068a8:	4649      	mov	r1, r9
 80068aa:	4638      	mov	r0, r7
 80068ac:	47c0      	blx	r8
 80068ae:	3001      	adds	r0, #1
 80068b0:	d0e6      	beq.n	8006880 <_printf_common+0xa4>
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7d9      	b.n	800686a <_printf_common+0x8e>
	...

080068b8 <_printf_i>:
 80068b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	7e0f      	ldrb	r7, [r1, #24]
 80068be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068c0:	2f78      	cmp	r7, #120	; 0x78
 80068c2:	4691      	mov	r9, r2
 80068c4:	4680      	mov	r8, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	469a      	mov	sl, r3
 80068ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068ce:	d807      	bhi.n	80068e0 <_printf_i+0x28>
 80068d0:	2f62      	cmp	r7, #98	; 0x62
 80068d2:	d80a      	bhi.n	80068ea <_printf_i+0x32>
 80068d4:	2f00      	cmp	r7, #0
 80068d6:	f000 80d8 	beq.w	8006a8a <_printf_i+0x1d2>
 80068da:	2f58      	cmp	r7, #88	; 0x58
 80068dc:	f000 80a3 	beq.w	8006a26 <_printf_i+0x16e>
 80068e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e8:	e03a      	b.n	8006960 <_printf_i+0xa8>
 80068ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068ee:	2b15      	cmp	r3, #21
 80068f0:	d8f6      	bhi.n	80068e0 <_printf_i+0x28>
 80068f2:	a101      	add	r1, pc, #4	; (adr r1, 80068f8 <_printf_i+0x40>)
 80068f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f8:	08006951 	.word	0x08006951
 80068fc:	08006965 	.word	0x08006965
 8006900:	080068e1 	.word	0x080068e1
 8006904:	080068e1 	.word	0x080068e1
 8006908:	080068e1 	.word	0x080068e1
 800690c:	080068e1 	.word	0x080068e1
 8006910:	08006965 	.word	0x08006965
 8006914:	080068e1 	.word	0x080068e1
 8006918:	080068e1 	.word	0x080068e1
 800691c:	080068e1 	.word	0x080068e1
 8006920:	080068e1 	.word	0x080068e1
 8006924:	08006a71 	.word	0x08006a71
 8006928:	08006995 	.word	0x08006995
 800692c:	08006a53 	.word	0x08006a53
 8006930:	080068e1 	.word	0x080068e1
 8006934:	080068e1 	.word	0x080068e1
 8006938:	08006a93 	.word	0x08006a93
 800693c:	080068e1 	.word	0x080068e1
 8006940:	08006995 	.word	0x08006995
 8006944:	080068e1 	.word	0x080068e1
 8006948:	080068e1 	.word	0x080068e1
 800694c:	08006a5b 	.word	0x08006a5b
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	602a      	str	r2, [r5, #0]
 8006958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800695c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006960:	2301      	movs	r3, #1
 8006962:	e0a3      	b.n	8006aac <_printf_i+0x1f4>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	6829      	ldr	r1, [r5, #0]
 8006968:	0606      	lsls	r6, r0, #24
 800696a:	f101 0304 	add.w	r3, r1, #4
 800696e:	d50a      	bpl.n	8006986 <_printf_i+0xce>
 8006970:	680e      	ldr	r6, [r1, #0]
 8006972:	602b      	str	r3, [r5, #0]
 8006974:	2e00      	cmp	r6, #0
 8006976:	da03      	bge.n	8006980 <_printf_i+0xc8>
 8006978:	232d      	movs	r3, #45	; 0x2d
 800697a:	4276      	negs	r6, r6
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006980:	485e      	ldr	r0, [pc, #376]	; (8006afc <_printf_i+0x244>)
 8006982:	230a      	movs	r3, #10
 8006984:	e019      	b.n	80069ba <_printf_i+0x102>
 8006986:	680e      	ldr	r6, [r1, #0]
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800698e:	bf18      	it	ne
 8006990:	b236      	sxthne	r6, r6
 8006992:	e7ef      	b.n	8006974 <_printf_i+0xbc>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	1d19      	adds	r1, r3, #4
 800699a:	6029      	str	r1, [r5, #0]
 800699c:	0601      	lsls	r1, r0, #24
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0xec>
 80069a0:	681e      	ldr	r6, [r3, #0]
 80069a2:	e002      	b.n	80069aa <_printf_i+0xf2>
 80069a4:	0646      	lsls	r6, r0, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0xe8>
 80069a8:	881e      	ldrh	r6, [r3, #0]
 80069aa:	4854      	ldr	r0, [pc, #336]	; (8006afc <_printf_i+0x244>)
 80069ac:	2f6f      	cmp	r7, #111	; 0x6f
 80069ae:	bf0c      	ite	eq
 80069b0:	2308      	moveq	r3, #8
 80069b2:	230a      	movne	r3, #10
 80069b4:	2100      	movs	r1, #0
 80069b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069ba:	6865      	ldr	r5, [r4, #4]
 80069bc:	60a5      	str	r5, [r4, #8]
 80069be:	2d00      	cmp	r5, #0
 80069c0:	bfa2      	ittt	ge
 80069c2:	6821      	ldrge	r1, [r4, #0]
 80069c4:	f021 0104 	bicge.w	r1, r1, #4
 80069c8:	6021      	strge	r1, [r4, #0]
 80069ca:	b90e      	cbnz	r6, 80069d0 <_printf_i+0x118>
 80069cc:	2d00      	cmp	r5, #0
 80069ce:	d04d      	beq.n	8006a6c <_printf_i+0x1b4>
 80069d0:	4615      	mov	r5, r2
 80069d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80069d6:	fb03 6711 	mls	r7, r3, r1, r6
 80069da:	5dc7      	ldrb	r7, [r0, r7]
 80069dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069e0:	4637      	mov	r7, r6
 80069e2:	42bb      	cmp	r3, r7
 80069e4:	460e      	mov	r6, r1
 80069e6:	d9f4      	bls.n	80069d2 <_printf_i+0x11a>
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d10b      	bne.n	8006a04 <_printf_i+0x14c>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	07de      	lsls	r6, r3, #31
 80069f0:	d508      	bpl.n	8006a04 <_printf_i+0x14c>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	6861      	ldr	r1, [r4, #4]
 80069f6:	4299      	cmp	r1, r3
 80069f8:	bfde      	ittt	le
 80069fa:	2330      	movle	r3, #48	; 0x30
 80069fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a04:	1b52      	subs	r2, r2, r5
 8006a06:	6122      	str	r2, [r4, #16]
 8006a08:	f8cd a000 	str.w	sl, [sp]
 8006a0c:	464b      	mov	r3, r9
 8006a0e:	aa03      	add	r2, sp, #12
 8006a10:	4621      	mov	r1, r4
 8006a12:	4640      	mov	r0, r8
 8006a14:	f7ff fee2 	bl	80067dc <_printf_common>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d14c      	bne.n	8006ab6 <_printf_i+0x1fe>
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a20:	b004      	add	sp, #16
 8006a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a26:	4835      	ldr	r0, [pc, #212]	; (8006afc <_printf_i+0x244>)
 8006a28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a2c:	6829      	ldr	r1, [r5, #0]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a34:	6029      	str	r1, [r5, #0]
 8006a36:	061d      	lsls	r5, r3, #24
 8006a38:	d514      	bpl.n	8006a64 <_printf_i+0x1ac>
 8006a3a:	07df      	lsls	r7, r3, #31
 8006a3c:	bf44      	itt	mi
 8006a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a42:	6023      	strmi	r3, [r4, #0]
 8006a44:	b91e      	cbnz	r6, 8006a4e <_printf_i+0x196>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f023 0320 	bic.w	r3, r3, #32
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	2310      	movs	r3, #16
 8006a50:	e7b0      	b.n	80069b4 <_printf_i+0xfc>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f043 0320 	orr.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	2378      	movs	r3, #120	; 0x78
 8006a5c:	4828      	ldr	r0, [pc, #160]	; (8006b00 <_printf_i+0x248>)
 8006a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a62:	e7e3      	b.n	8006a2c <_printf_i+0x174>
 8006a64:	0659      	lsls	r1, r3, #25
 8006a66:	bf48      	it	mi
 8006a68:	b2b6      	uxthmi	r6, r6
 8006a6a:	e7e6      	b.n	8006a3a <_printf_i+0x182>
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	e7bb      	b.n	80069e8 <_printf_i+0x130>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	6826      	ldr	r6, [r4, #0]
 8006a74:	6961      	ldr	r1, [r4, #20]
 8006a76:	1d18      	adds	r0, r3, #4
 8006a78:	6028      	str	r0, [r5, #0]
 8006a7a:	0635      	lsls	r5, r6, #24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0x1cc>
 8006a80:	6019      	str	r1, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <_printf_i+0x1d2>
 8006a84:	0670      	lsls	r0, r6, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0x1c8>
 8006a88:	8019      	strh	r1, [r3, #0]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	4615      	mov	r5, r2
 8006a90:	e7ba      	b.n	8006a08 <_printf_i+0x150>
 8006a92:	682b      	ldr	r3, [r5, #0]
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	602a      	str	r2, [r5, #0]
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	6862      	ldr	r2, [r4, #4]
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7f9 fbbe 	bl	8000220 <memchr>
 8006aa4:	b108      	cbz	r0, 8006aaa <_printf_i+0x1f2>
 8006aa6:	1b40      	subs	r0, r0, r5
 8006aa8:	6060      	str	r0, [r4, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	6123      	str	r3, [r4, #16]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab4:	e7a8      	b.n	8006a08 <_printf_i+0x150>
 8006ab6:	6923      	ldr	r3, [r4, #16]
 8006ab8:	462a      	mov	r2, r5
 8006aba:	4649      	mov	r1, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	47d0      	blx	sl
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d0ab      	beq.n	8006a1c <_printf_i+0x164>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	079b      	lsls	r3, r3, #30
 8006ac8:	d413      	bmi.n	8006af2 <_printf_i+0x23a>
 8006aca:	68e0      	ldr	r0, [r4, #12]
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	4298      	cmp	r0, r3
 8006ad0:	bfb8      	it	lt
 8006ad2:	4618      	movlt	r0, r3
 8006ad4:	e7a4      	b.n	8006a20 <_printf_i+0x168>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4649      	mov	r1, r9
 8006adc:	4640      	mov	r0, r8
 8006ade:	47d0      	blx	sl
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d09b      	beq.n	8006a1c <_printf_i+0x164>
 8006ae4:	3501      	adds	r5, #1
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	9903      	ldr	r1, [sp, #12]
 8006aea:	1a5b      	subs	r3, r3, r1
 8006aec:	42ab      	cmp	r3, r5
 8006aee:	dcf2      	bgt.n	8006ad6 <_printf_i+0x21e>
 8006af0:	e7eb      	b.n	8006aca <_printf_i+0x212>
 8006af2:	2500      	movs	r5, #0
 8006af4:	f104 0619 	add.w	r6, r4, #25
 8006af8:	e7f5      	b.n	8006ae6 <_printf_i+0x22e>
 8006afa:	bf00      	nop
 8006afc:	0800707d 	.word	0x0800707d
 8006b00:	0800708e 	.word	0x0800708e

08006b04 <memcpy>:
 8006b04:	440a      	add	r2, r1
 8006b06:	4291      	cmp	r1, r2
 8006b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b0c:	d100      	bne.n	8006b10 <memcpy+0xc>
 8006b0e:	4770      	bx	lr
 8006b10:	b510      	push	{r4, lr}
 8006b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b1a:	4291      	cmp	r1, r2
 8006b1c:	d1f9      	bne.n	8006b12 <memcpy+0xe>
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <memmove>:
 8006b20:	4288      	cmp	r0, r1
 8006b22:	b510      	push	{r4, lr}
 8006b24:	eb01 0402 	add.w	r4, r1, r2
 8006b28:	d902      	bls.n	8006b30 <memmove+0x10>
 8006b2a:	4284      	cmp	r4, r0
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	d807      	bhi.n	8006b40 <memmove+0x20>
 8006b30:	1e43      	subs	r3, r0, #1
 8006b32:	42a1      	cmp	r1, r4
 8006b34:	d008      	beq.n	8006b48 <memmove+0x28>
 8006b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b3e:	e7f8      	b.n	8006b32 <memmove+0x12>
 8006b40:	4402      	add	r2, r0
 8006b42:	4601      	mov	r1, r0
 8006b44:	428a      	cmp	r2, r1
 8006b46:	d100      	bne.n	8006b4a <memmove+0x2a>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b52:	e7f7      	b.n	8006b44 <memmove+0x24>

08006b54 <_free_r>:
 8006b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b56:	2900      	cmp	r1, #0
 8006b58:	d044      	beq.n	8006be4 <_free_r+0x90>
 8006b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b5e:	9001      	str	r0, [sp, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f1a1 0404 	sub.w	r4, r1, #4
 8006b66:	bfb8      	it	lt
 8006b68:	18e4      	addlt	r4, r4, r3
 8006b6a:	f000 f913 	bl	8006d94 <__malloc_lock>
 8006b6e:	4a1e      	ldr	r2, [pc, #120]	; (8006be8 <_free_r+0x94>)
 8006b70:	9801      	ldr	r0, [sp, #4]
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	b933      	cbnz	r3, 8006b84 <_free_r+0x30>
 8006b76:	6063      	str	r3, [r4, #4]
 8006b78:	6014      	str	r4, [r2, #0]
 8006b7a:	b003      	add	sp, #12
 8006b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b80:	f000 b90e 	b.w	8006da0 <__malloc_unlock>
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d908      	bls.n	8006b9a <_free_r+0x46>
 8006b88:	6825      	ldr	r5, [r4, #0]
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	bf01      	itttt	eq
 8006b90:	6819      	ldreq	r1, [r3, #0]
 8006b92:	685b      	ldreq	r3, [r3, #4]
 8006b94:	1949      	addeq	r1, r1, r5
 8006b96:	6021      	streq	r1, [r4, #0]
 8006b98:	e7ed      	b.n	8006b76 <_free_r+0x22>
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b10b      	cbz	r3, 8006ba4 <_free_r+0x50>
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d9fa      	bls.n	8006b9a <_free_r+0x46>
 8006ba4:	6811      	ldr	r1, [r2, #0]
 8006ba6:	1855      	adds	r5, r2, r1
 8006ba8:	42a5      	cmp	r5, r4
 8006baa:	d10b      	bne.n	8006bc4 <_free_r+0x70>
 8006bac:	6824      	ldr	r4, [r4, #0]
 8006bae:	4421      	add	r1, r4
 8006bb0:	1854      	adds	r4, r2, r1
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	d1e0      	bne.n	8006b7a <_free_r+0x26>
 8006bb8:	681c      	ldr	r4, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	4421      	add	r1, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	e7da      	b.n	8006b7a <_free_r+0x26>
 8006bc4:	d902      	bls.n	8006bcc <_free_r+0x78>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	6003      	str	r3, [r0, #0]
 8006bca:	e7d6      	b.n	8006b7a <_free_r+0x26>
 8006bcc:	6825      	ldr	r5, [r4, #0]
 8006bce:	1961      	adds	r1, r4, r5
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bf04      	itt	eq
 8006bd4:	6819      	ldreq	r1, [r3, #0]
 8006bd6:	685b      	ldreq	r3, [r3, #4]
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	bf04      	itt	eq
 8006bdc:	1949      	addeq	r1, r1, r5
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	6054      	str	r4, [r2, #4]
 8006be2:	e7ca      	b.n	8006b7a <_free_r+0x26>
 8006be4:	b003      	add	sp, #12
 8006be6:	bd30      	pop	{r4, r5, pc}
 8006be8:	200007d8 	.word	0x200007d8

08006bec <sbrk_aligned>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	4e0e      	ldr	r6, [pc, #56]	; (8006c28 <sbrk_aligned+0x3c>)
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	6831      	ldr	r1, [r6, #0]
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	b911      	cbnz	r1, 8006bfe <sbrk_aligned+0x12>
 8006bf8:	f000 f8bc 	bl	8006d74 <_sbrk_r>
 8006bfc:	6030      	str	r0, [r6, #0]
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f8b7 	bl	8006d74 <_sbrk_r>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d00a      	beq.n	8006c20 <sbrk_aligned+0x34>
 8006c0a:	1cc4      	adds	r4, r0, #3
 8006c0c:	f024 0403 	bic.w	r4, r4, #3
 8006c10:	42a0      	cmp	r0, r4
 8006c12:	d007      	beq.n	8006c24 <sbrk_aligned+0x38>
 8006c14:	1a21      	subs	r1, r4, r0
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 f8ac 	bl	8006d74 <_sbrk_r>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d101      	bne.n	8006c24 <sbrk_aligned+0x38>
 8006c20:	f04f 34ff 	mov.w	r4, #4294967295
 8006c24:	4620      	mov	r0, r4
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	200007dc 	.word	0x200007dc

08006c2c <_malloc_r>:
 8006c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	1ccd      	adds	r5, r1, #3
 8006c32:	f025 0503 	bic.w	r5, r5, #3
 8006c36:	3508      	adds	r5, #8
 8006c38:	2d0c      	cmp	r5, #12
 8006c3a:	bf38      	it	cc
 8006c3c:	250c      	movcc	r5, #12
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	4607      	mov	r7, r0
 8006c42:	db01      	blt.n	8006c48 <_malloc_r+0x1c>
 8006c44:	42a9      	cmp	r1, r5
 8006c46:	d905      	bls.n	8006c54 <_malloc_r+0x28>
 8006c48:	230c      	movs	r3, #12
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c54:	4e2e      	ldr	r6, [pc, #184]	; (8006d10 <_malloc_r+0xe4>)
 8006c56:	f000 f89d 	bl	8006d94 <__malloc_lock>
 8006c5a:	6833      	ldr	r3, [r6, #0]
 8006c5c:	461c      	mov	r4, r3
 8006c5e:	bb34      	cbnz	r4, 8006cae <_malloc_r+0x82>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4638      	mov	r0, r7
 8006c64:	f7ff ffc2 	bl	8006bec <sbrk_aligned>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	d14d      	bne.n	8006d0a <_malloc_r+0xde>
 8006c6e:	6834      	ldr	r4, [r6, #0]
 8006c70:	4626      	mov	r6, r4
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	d140      	bne.n	8006cf8 <_malloc_r+0xcc>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	eb04 0803 	add.w	r8, r4, r3
 8006c80:	f000 f878 	bl	8006d74 <_sbrk_r>
 8006c84:	4580      	cmp	r8, r0
 8006c86:	d13a      	bne.n	8006cfe <_malloc_r+0xd2>
 8006c88:	6821      	ldr	r1, [r4, #0]
 8006c8a:	3503      	adds	r5, #3
 8006c8c:	1a6d      	subs	r5, r5, r1
 8006c8e:	f025 0503 	bic.w	r5, r5, #3
 8006c92:	3508      	adds	r5, #8
 8006c94:	2d0c      	cmp	r5, #12
 8006c96:	bf38      	it	cc
 8006c98:	250c      	movcc	r5, #12
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff ffa5 	bl	8006bec <sbrk_aligned>
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d02b      	beq.n	8006cfe <_malloc_r+0xd2>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	442b      	add	r3, r5
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	e00e      	b.n	8006ccc <_malloc_r+0xa0>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	1b52      	subs	r2, r2, r5
 8006cb2:	d41e      	bmi.n	8006cf2 <_malloc_r+0xc6>
 8006cb4:	2a0b      	cmp	r2, #11
 8006cb6:	d916      	bls.n	8006ce6 <_malloc_r+0xba>
 8006cb8:	1961      	adds	r1, r4, r5
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	6025      	str	r5, [r4, #0]
 8006cbe:	bf18      	it	ne
 8006cc0:	6059      	strne	r1, [r3, #4]
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	bf08      	it	eq
 8006cc6:	6031      	streq	r1, [r6, #0]
 8006cc8:	5162      	str	r2, [r4, r5]
 8006cca:	604b      	str	r3, [r1, #4]
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f104 060b 	add.w	r6, r4, #11
 8006cd2:	f000 f865 	bl	8006da0 <__malloc_unlock>
 8006cd6:	f026 0607 	bic.w	r6, r6, #7
 8006cda:	1d23      	adds	r3, r4, #4
 8006cdc:	1af2      	subs	r2, r6, r3
 8006cde:	d0b6      	beq.n	8006c4e <_malloc_r+0x22>
 8006ce0:	1b9b      	subs	r3, r3, r6
 8006ce2:	50a3      	str	r3, [r4, r2]
 8006ce4:	e7b3      	b.n	8006c4e <_malloc_r+0x22>
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	bf0c      	ite	eq
 8006cec:	6032      	streq	r2, [r6, #0]
 8006cee:	605a      	strne	r2, [r3, #4]
 8006cf0:	e7ec      	b.n	8006ccc <_malloc_r+0xa0>
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	6864      	ldr	r4, [r4, #4]
 8006cf6:	e7b2      	b.n	8006c5e <_malloc_r+0x32>
 8006cf8:	4634      	mov	r4, r6
 8006cfa:	6876      	ldr	r6, [r6, #4]
 8006cfc:	e7b9      	b.n	8006c72 <_malloc_r+0x46>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	4638      	mov	r0, r7
 8006d04:	f000 f84c 	bl	8006da0 <__malloc_unlock>
 8006d08:	e7a1      	b.n	8006c4e <_malloc_r+0x22>
 8006d0a:	6025      	str	r5, [r4, #0]
 8006d0c:	e7de      	b.n	8006ccc <_malloc_r+0xa0>
 8006d0e:	bf00      	nop
 8006d10:	200007d8 	.word	0x200007d8

08006d14 <_realloc_r>:
 8006d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d18:	4680      	mov	r8, r0
 8006d1a:	4614      	mov	r4, r2
 8006d1c:	460e      	mov	r6, r1
 8006d1e:	b921      	cbnz	r1, 8006d2a <_realloc_r+0x16>
 8006d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d24:	4611      	mov	r1, r2
 8006d26:	f7ff bf81 	b.w	8006c2c <_malloc_r>
 8006d2a:	b92a      	cbnz	r2, 8006d38 <_realloc_r+0x24>
 8006d2c:	f7ff ff12 	bl	8006b54 <_free_r>
 8006d30:	4625      	mov	r5, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d38:	f000 f838 	bl	8006dac <_malloc_usable_size_r>
 8006d3c:	4284      	cmp	r4, r0
 8006d3e:	4607      	mov	r7, r0
 8006d40:	d802      	bhi.n	8006d48 <_realloc_r+0x34>
 8006d42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d46:	d812      	bhi.n	8006d6e <_realloc_r+0x5a>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7ff ff6e 	bl	8006c2c <_malloc_r>
 8006d50:	4605      	mov	r5, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d0ed      	beq.n	8006d32 <_realloc_r+0x1e>
 8006d56:	42bc      	cmp	r4, r7
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	bf28      	it	cs
 8006d5e:	463a      	movcs	r2, r7
 8006d60:	f7ff fed0 	bl	8006b04 <memcpy>
 8006d64:	4631      	mov	r1, r6
 8006d66:	4640      	mov	r0, r8
 8006d68:	f7ff fef4 	bl	8006b54 <_free_r>
 8006d6c:	e7e1      	b.n	8006d32 <_realloc_r+0x1e>
 8006d6e:	4635      	mov	r5, r6
 8006d70:	e7df      	b.n	8006d32 <_realloc_r+0x1e>
	...

08006d74 <_sbrk_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d06      	ldr	r5, [pc, #24]	; (8006d90 <_sbrk_r+0x1c>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7fa f8c8 	bl	8000f14 <_sbrk>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_sbrk_r+0x1a>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_sbrk_r+0x1a>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	200007e0 	.word	0x200007e0

08006d94 <__malloc_lock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__malloc_lock+0x8>)
 8006d96:	f000 b811 	b.w	8006dbc <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	200007e4 	.word	0x200007e4

08006da0 <__malloc_unlock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__malloc_unlock+0x8>)
 8006da2:	f000 b80c 	b.w	8006dbe <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	200007e4 	.word	0x200007e4

08006dac <_malloc_usable_size_r>:
 8006dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db0:	1f18      	subs	r0, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bfbc      	itt	lt
 8006db6:	580b      	ldrlt	r3, [r1, r0]
 8006db8:	18c0      	addlt	r0, r0, r3
 8006dba:	4770      	bx	lr

08006dbc <__retarget_lock_acquire_recursive>:
 8006dbc:	4770      	bx	lr

08006dbe <__retarget_lock_release_recursive>:
 8006dbe:	4770      	bx	lr

08006dc0 <_init>:
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc2:	bf00      	nop
 8006dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc6:	bc08      	pop	{r3}
 8006dc8:	469e      	mov	lr, r3
 8006dca:	4770      	bx	lr

08006dcc <_fini>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr
